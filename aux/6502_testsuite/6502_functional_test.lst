AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6188 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2015  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ;
                        ; version 21-oct-2015
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $50 (80) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a
                        
                        ;data_segment memory start address, $6A (106) consecutive Bytes required
0200 =                  data_segment = $200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif
                        
                        ;code_segment memory start address, 13kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
ae00 =                  code_segment = $ae00
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0001 =                  report = 1
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
00ae =                  ram_top = 0xae
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0000 =                  disable_decimal = 0
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                endif
                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
000a =                          org zero_page
                        ;break test interrupt save
000a : 00               irq_a   ds  1               ;a register
000b : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
000c :                  zpt                         ;5 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
000c : 00               adfc    ds  1               ;carry flag before op
000d : 00               ad1     ds  1               ;operand 1 - accumulator
000e : 00               ad2     ds  1               ;operand 2 - memory / immediate
000f : 00               adrl    ds  1               ;expected result bits 0-7
0010 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0011 : 00               adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0012 : 00               sb2     ds  1               ;operand 2 complemented for subtract
0013 :                  zp_bss
0013 : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0017 : 7f               zp7f    db  $7f             ;test pattern for compare
                        ;logical zeropage operands
0018 : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001c : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0020 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0024 : 1702             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
0026 : 1802                     dw  abs1+1
0028 : 1902                     dw  abs1+2
002a : 1a02                     dw  abs1+3
002c : 1b02                     dw  abs7f
002e : 1f01             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0030 : 0302             indt    dw  abst            ;indirect pointer to store area in absolute memory
0032 : 0402                     dw  abst+1
0034 : 0502                     dw  abst+2
0036 : 0602                     dw  abst+3
0038 : 0b01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
003a : 4e02             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
003c : 4f02                     dw  absAN+1
003e : 5002                     dw  absAN+2
0040 : 5102                     dw  absAN+3
0042 : 5202             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
0044 : 5302                     dw  absEO+1
0046 : 5402                     dw  absEO+2
0048 : 5502                     dw  absEO+3
004a : 4a02             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
004c : 4b02                     dw  absOR+1
004e : 4c02                     dw  absOR+2
0050 : 4d02                     dw  absOR+3
                        ;add/subtract indirect pointers
0052 : 0302             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
0054 : 0402             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
0056 : 0401             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0058 : 0501             sbiy2   dw  sba2-$ff
005a :                  zp_bss_end
                        
0200 =                          org data_segment
0200 : 00               test_case   ds  1           ;current test number
0201 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 :                  abst                        ;5 bytes store/modify test area
0203 : 00               ada2    ds  1               ;operand 2
0204 : 00               sba2    ds  1               ;operand 2 complemented for subtract
0205 : 000000                   ds  3               ;fill remaining bytes
0208 :                  data_bss
                            if load_data_direct = 1
0208 : 2900             ex_andi and #0              ;execute immediate opcodes
020a : 60                       rts
020b : 4900             ex_eori eor #0              ;execute immediate opcodes
020d : 60                       rts
020e : 0900             ex_orai ora #0              ;execute immediate opcodes
0210 : 60                       rts
0211 : 6900             ex_adci adc #0              ;execute immediate opcodes
0213 : 60                       rts
0214 : e900             ex_sbci sbc #0              ;execute immediate opcodes
0216 : 60                       rts
                            else
                        ex_andi ds  3
                        ex_eori ds  3
                        ex_orai ds  3
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
0217 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
021b : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
021c : 80800002         fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
0220 :                  rASL                        ;expected result ASL & ROL -carry
0220 : 86048200         rROL    db  $86,$04,$82,0   ; "
0224 : 87058301         rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
0228 :                  rLSR                        ;expected result LSR & ROR -carry
0228 : 61412000         rROR    db  $61,$41,$20,0   ; "
022c : e1c1a080         rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
0230 :                  fASL                        ;expected flags for shifts
0230 : 81018002         fROL    db  fnc,fc,fn,fz    ;no carry in
0234 : 81018000         fROLc   db  fnc,fc,fn,0     ;carry in
0238 :                  fLSR
0238 : 01000102         fROR    db  fc,0,fc,fz      ;no carry in
023c : 81808180         fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
0240 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
0245 : 0080800200       fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
024a : 001f7180         absOR   db  0,$1f,$71,$80   ;test pattern for OR
024e : 0fff7f80         absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
0252 : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
0256 : 00f11f00         absORa  db  0,$f1,$1f,0     ;test pattern for OR
025a : f0ffffff         absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
025e : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
0262 : 00ff7f80         absrlo  db  0,$ff,$7f,$80
0266 : 02800080         absflo  db  fz,fn,0,fn
026a :                  data_bss_end
                        
                        
                                code
ae00 =                          org code_segment
ae00 : d8               start   cld
ae01 : a2ff                     ldx #$ff
ae03 : 9a                       txs
ae04 : a900                     lda #0          ;*** test 0 = initialize
ae06 : 8d0002                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                        
                        ;initialize I/O for report channel
                            if report = 1
ae09 : 2024ee                   jsr report_init
                            endif
                        
                        ;pretest small branch offset
ae0c : a205                     ldx #5
ae0e : 4c36ae                   jmp psb_test
ae11 :                  psb_bwok
ae11 : a005                     ldy #5
ae13 : d008                     bne psb_forw
                                trap        ;branch should be taken
                        
ae18 : 88                       dey         ;forward landing zone
ae19 : 88                       dey
ae1a : 88                       dey
ae1b : 88                       dey
ae1c : 88                       dey
ae1d :                  psb_forw
ae1d : 88                       dey
ae1e : 88                       dey
ae1f : 88                       dey
ae20 : 88                       dey
ae21 : 88                       dey
ae22 : f017                     beq psb_fwok
                                trap        ;forward offset
                        
                        
ae27 : ca                       dex         ;backward landing zone
ae28 : ca                       dex
ae29 : ca                       dex
ae2a : ca                       dex
ae2b : ca                       dex
ae2c :                  psb_back
ae2c : ca                       dex
ae2d : ca                       dex
ae2e : ca                       dex
ae2f : ca                       dex
ae30 : ca                       dex
ae31 : f0de                     beq psb_bwok
                                trap        ;backward offset
                        
ae36 :                  psb_test
ae36 : d0f4                     bne psb_back
                                trap        ;branch should be taken
                        
ae3b :                  psb_fwok
                        
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                        
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
ae3b : a900                     lda #0
ae3d : 850c                     sta zpt         ;set low byte of indirect pointer
ae3f : 8d0202                   sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
ae42 : 8d1faf                   sta range_adr   ;reset self modifying code
                              endif
ae45 : 18                       clc
ae46 : a209                     ldx #zp_bss-zero_page ;zeropage - write test area
ae48 : 750a             gcs3    adc zero_page,x
ae4a : 9004                     bcc gcs2
ae4c : ee0202                   inc ram_chksm+1 ;carry to high byte
ae4f : 18                       clc
ae50 : e8               gcs2    inx
ae51 : d0f5                     bne gcs3
ae53 : a202                     ldx #hi(abs1)   ;set high byte of indirect pointer
ae55 : 860d                     stx zpt+1
ae57 : a017                     ldy #lo(abs1)   ;data after write & execute test area
ae59 : 710c             gcs5    adc (zpt),y
ae5b : 9004                     bcc gcs4
ae5d : ee0202                   inc ram_chksm+1 ;carry to high byte
ae60 : 18                       clc
ae61 : c8               gcs4    iny
ae62 : d0f5                     bne gcs5
ae64 : e8                       inx             ;advance RAM high address
ae65 : 860d                     stx zpt+1
ae67 : e0ae                     cpx #ram_top
ae69 : d0ee                     bne gcs5
ae6b : 8d0102                   sta ram_chksm   ;checksum complete
                            endif
                                next_test
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
ae7d : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
ae7f :                  range_loop
ae7f : 88                       dey             ;next relative address
ae80 : 98                       tya
ae81 : aa                       tax             ;precharge count to end of loop
ae82 : 1008                     bpl range_fw    ;calculate relative address
ae84 : 18                       clc             ;avoid branch self or to relative address of branch
ae85 : 6902                     adc #2
ae87 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
ae88 : ea                       nop
ae89 : ea                       nop
ae8a : ea                       nop
ae8b : ea                       nop
ae8c :                  range_fw
ae8c : ea                       nop
ae8d : ea                       nop
ae8e : ea                       nop
ae8f : ea                       nop
ae90 : ea                       nop
ae91 : 497f                     eor #$7f        ;complement except sign
ae93 : 8d1faf                   sta range_adr   ;load into test target
ae96 : a900                     lda #0          ;should set zero flag in status register
ae98 : 4c1eaf                   jmp range_op
                        
ae9b : ca                       dex             ; offset landing zone - backward branch too far
ae9c : ca                       dex
ae9d : ca                       dex
ae9e : ca                       dex
ae9f : ca                       dex
                                ;relative address target field with branch under test in the middle
aea0 : ca                       dex             ;-128 - max backward
aea1 : ca                       dex
aea2 : ca                       dex
aea3 : ca                       dex
aea4 : ca                       dex
aea5 : ca                       dex
aea6 : ca                       dex
aea7 : ca                       dex
aea8 : ca                       dex             ;-120
aea9 : ca                       dex
aeaa : ca                       dex
aeab : ca                       dex
aeac : ca                       dex
aead : ca                       dex
aeae : ca                       dex
aeaf : ca                       dex
aeb0 : ca                       dex
aeb1 : ca                       dex
aeb2 : ca                       dex             ;-110
aeb3 : ca                       dex
aeb4 : ca                       dex
aeb5 : ca                       dex
aeb6 : ca                       dex
aeb7 : ca                       dex
aeb8 : ca                       dex
aeb9 : ca                       dex
aeba : ca                       dex
aebb : ca                       dex
aebc : ca                       dex             ;-100
aebd : ca                       dex
aebe : ca                       dex
aebf : ca                       dex
aec0 : ca                       dex
aec1 : ca                       dex
aec2 : ca                       dex
aec3 : ca                       dex
aec4 : ca                       dex
aec5 : ca                       dex
aec6 : ca                       dex             ;-90
aec7 : ca                       dex
aec8 : ca                       dex
aec9 : ca                       dex
aeca : ca                       dex
aecb : ca                       dex
aecc : ca                       dex
aecd : ca                       dex
aece : ca                       dex
aecf : ca                       dex
aed0 : ca                       dex             ;-80
aed1 : ca                       dex
aed2 : ca                       dex
aed3 : ca                       dex
aed4 : ca                       dex
aed5 : ca                       dex
aed6 : ca                       dex
aed7 : ca                       dex
aed8 : ca                       dex
aed9 : ca                       dex
aeda : ca                       dex             ;-70
aedb : ca                       dex
aedc : ca                       dex
aedd : ca                       dex
aede : ca                       dex
aedf : ca                       dex
aee0 : ca                       dex
aee1 : ca                       dex
aee2 : ca                       dex
aee3 : ca                       dex
aee4 : ca                       dex             ;-60
aee5 : ca                       dex
aee6 : ca                       dex
aee7 : ca                       dex
aee8 : ca                       dex
aee9 : ca                       dex
aeea : ca                       dex
aeeb : ca                       dex
aeec : ca                       dex
aeed : ca                       dex
aeee : ca                       dex             ;-50
aeef : ca                       dex
aef0 : ca                       dex
aef1 : ca                       dex
aef2 : ca                       dex
aef3 : ca                       dex
aef4 : ca                       dex
aef5 : ca                       dex
aef6 : ca                       dex
aef7 : ca                       dex
aef8 : ca                       dex             ;-40
aef9 : ca                       dex
aefa : ca                       dex
aefb : ca                       dex
aefc : ca                       dex
aefd : ca                       dex
aefe : ca                       dex
aeff : ca                       dex
af00 : ca                       dex
af01 : ca                       dex
af02 : ca                       dex             ;-30
af03 : ca                       dex
af04 : ca                       dex
af05 : ca                       dex
af06 : ca                       dex
af07 : ca                       dex
af08 : ca                       dex
af09 : ca                       dex
af0a : ca                       dex
af0b : ca                       dex
af0c : ca                       dex             ;-20
af0d : ca                       dex
af0e : ca                       dex
af0f : ca                       dex
af10 : ca                       dex
af11 : ca                       dex
af12 : ca                       dex
af13 : ca                       dex
af14 : ca                       dex
af15 : ca                       dex
af16 : ca                       dex             ;-10
af17 : ca                       dex
af18 : ca                       dex
af19 : ca                       dex
af1a : ca                       dex
af1b : ca                       dex
af1c : ca                       dex
af1d : ca                       dex             ;-3
af1e :                  range_op                ;test target with zero flag=0, z=1 if previous dex
af1f =                  range_adr   = *+1       ;modifiable relative address
af1e : f03e                     beq *+64        ;+64 if called without modification
af20 : ca                       dex             ;+0
af21 : ca                       dex
af22 : ca                       dex
af23 : ca                       dex
af24 : ca                       dex
af25 : ca                       dex
af26 : ca                       dex
af27 : ca                       dex
af28 : ca                       dex
af29 : ca                       dex
af2a : ca                       dex             ;+10
af2b : ca                       dex
af2c : ca                       dex
af2d : ca                       dex
af2e : ca                       dex
af2f : ca                       dex
af30 : ca                       dex
af31 : ca                       dex
af32 : ca                       dex
af33 : ca                       dex
af34 : ca                       dex             ;+20
af35 : ca                       dex
af36 : ca                       dex
af37 : ca                       dex
af38 : ca                       dex
af39 : ca                       dex
af3a : ca                       dex
af3b : ca                       dex
af3c : ca                       dex
af3d : ca                       dex
af3e : ca                       dex             ;+30
af3f : ca                       dex
af40 : ca                       dex
af41 : ca                       dex
af42 : ca                       dex
af43 : ca                       dex
af44 : ca                       dex
af45 : ca                       dex
af46 : ca                       dex
af47 : ca                       dex
af48 : ca                       dex             ;+40
af49 : ca                       dex
af4a : ca                       dex
af4b : ca                       dex
af4c : ca                       dex
af4d : ca                       dex
af4e : ca                       dex
af4f : ca                       dex
af50 : ca                       dex
af51 : ca                       dex
af52 : ca                       dex             ;+50
af53 : ca                       dex
af54 : ca                       dex
af55 : ca                       dex
af56 : ca                       dex
af57 : ca                       dex
af58 : ca                       dex
af59 : ca                       dex
af5a : ca                       dex
af5b : ca                       dex
af5c : ca                       dex             ;+60
af5d : ca                       dex
af5e : ca                       dex
af5f : ca                       dex
af60 : ca                       dex
af61 : ca                       dex
af62 : ca                       dex
af63 : ca                       dex
af64 : ca                       dex
af65 : ca                       dex
af66 : ca                       dex             ;+70
af67 : ca                       dex
af68 : ca                       dex
af69 : ca                       dex
af6a : ca                       dex
af6b : ca                       dex
af6c : ca                       dex
af6d : ca                       dex
af6e : ca                       dex
af6f : ca                       dex
af70 : ca                       dex             ;+80
af71 : ca                       dex
af72 : ca                       dex
af73 : ca                       dex
af74 : ca                       dex
af75 : ca                       dex
af76 : ca                       dex
af77 : ca                       dex
af78 : ca                       dex
af79 : ca                       dex
af7a : ca                       dex             ;+90
af7b : ca                       dex
af7c : ca                       dex
af7d : ca                       dex
af7e : ca                       dex
af7f : ca                       dex
af80 : ca                       dex
af81 : ca                       dex
af82 : ca                       dex
af83 : ca                       dex
af84 : ca                       dex             ;+100
af85 : ca                       dex
af86 : ca                       dex
af87 : ca                       dex
af88 : ca                       dex
af89 : ca                       dex
af8a : ca                       dex
af8b : ca                       dex
af8c : ca                       dex
af8d : ca                       dex
af8e : ca                       dex             ;+110
af8f : ca                       dex
af90 : ca                       dex
af91 : ca                       dex
af92 : ca                       dex
af93 : ca                       dex
af94 : ca                       dex
af95 : ca                       dex
af96 : ca                       dex
af97 : ca                       dex
af98 : ca                       dex             ;+120
af99 : ca                       dex
af9a : ca                       dex
af9b : ca                       dex
af9c : ca                       dex
af9d : ca                       dex
af9e : ca                       dex
af9f : ea                       nop             ;offset landing zone - forward branch too far
afa0 : ea                       nop
afa1 : ea                       nop
afa2 : ea                       nop
afa3 : ea                       nop
afa4 : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
                        
afa9 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
afaa : ea                       nop
afab : ea                       nop
afac : ea                       nop
afad : ea                       nop
afae :                  range_ok
afae : ea                       nop
afaf : ea                       nop
afb0 : ea                       nop
afb1 : ea                       nop
afb2 : ea                       nop
afb3 : c000                     cpy #0
afb5 : f003                     beq range_end
afb7 : 4c7fae                   jmp range_loop
afba :                  range_end               ;range test successful
                            endif
                                next_test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
afc9 : c001                     cpy #1          ;testing BNE true
afcb : d003                     bne test_bne
                                trap
                        
afd0 :                  test_bne
afd0 : a900                     lda #0
afd2 : c900                     cmp #0          ;test compare immediate
                                trap_ne
                        
                                trap_cc
                        
                                trap_mi
                        
afe3 : c901                     cmp #1
                                trap_eq
                        
                                trap_cs
                        
                                trap_pl
                        
aff4 : aa                       tax
aff5 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
                        
                                trap_cc
                        
                                trap_mi
                        
b006 : e001                     cpx #1
                                trap_eq
                        
                                trap_cs
                        
                                trap_pl
                        
b017 : a8                       tay
b018 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
                        
                                trap_cc
                        
                                trap_mi
                        
b029 : c001                     cpy #1
                                trap_eq
                        
                                trap_cs
                        
                                trap_pl
                        
                                next_test
                        
                        ;testing stack operations PHA PHP PLA PLP
                        
b049 : a2ff                     ldx #$ff        ;initialize stack
b04b : 9a                       txs
b04c : a955                     lda #$55
b04e : 48                       pha
b04f : a9aa                     lda #$aa
b051 : 48                       pha
b052 : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
                        
b05a : ba                       tsx
b05b : 8a                       txa             ;overwrite accu
b05c : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
                        
b063 : 68                       pla
b064 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
                        
b06b : 68                       pla
b06c : c955                     cmp #$55
                                trap_ne
                        
b073 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
                        
b07b : ba                       tsx
b07c : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
                        
                                next_test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                        
b096 : 101a                     bpl nbr1        ;branches should not be taken
b098 : 501b                     bvc nbr2
b09a : 901c                     bcc nbr3
b09c : d01d                     bne nbr4
b09e : 3003                     bmi br1         ;branches should be taken
                                trap
                        
b0a3 : 7003             br1     bvs br2
                                trap
                        
b0a8 : b003             br2     bcs br3
                                trap
                        
b0ad : f00f             br3     beq br4
                                trap
                        
b0b2 :                  nbr1
                                trap            ;previous bpl taken
                        
b0b5 :                  nbr2
                                trap            ;previous bvc taken
                        
b0b8 :                  nbr3
                                trap            ;previous bcc taken
                        
b0bb :                  nbr4
                                trap            ;previous bne taken
                        
b0be : 08               br4     php
b0bf : ba                       tsx
b0c0 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
                        
b0c7 : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
                        
                                trap_ne
                        
b0cf : ba                       tsx
b0d0 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
                        
                                set_stat 0      ;all off
                        
b0db : 301a                     bmi nbr11       ;branches should not be taken
b0dd : 701b                     bvs nbr12
b0df : b01c                     bcs nbr13
b0e1 : f01d                     beq nbr14
b0e3 : 1003                     bpl br11        ;branches should be taken
                                trap
                        
b0e8 : 5003             br11    bvc br12
                                trap
                        
b0ed : 9003             br12    bcc br13
                                trap
                        
b0f2 : d00f             br13    bne br14
                                trap
                        
b0f7 :                  nbr11
                                trap            ;previous bmi taken
                        
b0fa :                  nbr12
                                trap            ;previous bvs taken
                        
b0fd :                  nbr13
                                trap            ;previous bcs taken
                        
b100 :                  nbr14
                                trap            ;previous beq taken
                        
b103 : 08               br14    php
b104 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
                        
                                trap_ne
                        
                                ;crosscheck flags
                                set_stat zero
                        
b110 : d002                     bne brzs1
b112 : f003                     beq brzs2
b114 :                  brzs1
                                trap            ;branch zero/non zero
                        
b117 : b002             brzs2   bcs brzs3
b119 : 9003                     bcc brzs4
b11b :                  brzs3
                                trap            ;branch carry/no carry
                        
b11e : 3002             brzs4   bmi brzs5
b120 : 1003                     bpl brzs6
b122 :                  brzs5
                                trap            ;branch minus/plus
                        
b125 : 7002             brzs6   bvs brzs7
b127 : 5003                     bvc brzs8
b129 :                  brzs7
                                trap            ;branch overflow/no overflow
                        
b12c :                  brzs8
                                set_stat carry
                        
b130 : f002                     beq brcs1
b132 : d003                     bne brcs2
b134 :                  brcs1
                                trap            ;branch zero/non zero
                        
b137 : 9002             brcs2   bcc brcs3
b139 : b003                     bcs brcs4
b13b :                  brcs3
                                trap            ;branch carry/no carry
                        
b13e : 3002             brcs4   bmi brcs5
b140 : 1003                     bpl brcs6
b142 :                  brcs5
                                trap            ;branch minus/plus
                        
b145 : 7002             brcs6   bvs brcs7
b147 : 5003                     bvc brcs8
b149 :                  brcs7
                                trap            ;branch overflow/no overflow
                        
                        
b14c :                  brcs8
                                set_stat minus
                        
b150 : f002                     beq brmi1
b152 : d003                     bne brmi2
b154 :                  brmi1
                                trap            ;branch zero/non zero
                        
b157 : b002             brmi2   bcs brmi3
b159 : 9003                     bcc brmi4
b15b :                  brmi3
                                trap            ;branch carry/no carry
                        
b15e : 1002             brmi4   bpl brmi5
b160 : 3003                     bmi brmi6
b162 :                  brmi5
                                trap            ;branch minus/plus
                        
b165 : 7002             brmi6   bvs brmi7
b167 : 5003                     bvc brmi8
b169 :                  brmi7
                                trap            ;branch overflow/no overflow
                        
b16c :                  brmi8
                                set_stat overfl
                        
b170 : f002                     beq brvs1
b172 : d003                     bne brvs2
b174 :                  brvs1
                                trap            ;branch zero/non zero
                        
b177 : b002             brvs2   bcs brvs3
b179 : 9003                     bcc brvs4
b17b :                  brvs3
                                trap            ;branch carry/no carry
                        
b17e : 3002             brvs4   bmi brvs5
b180 : 1003                     bpl brvs6
b182 :                  brvs5
                                trap            ;branch minus/plus
                        
b185 : 5002             brvs6   bvc brvs7
b187 : 7003                     bvs brvs8
b189 :                  brvs7
                                trap            ;branch overflow/no overflow
                        
b18c :                  brvs8
                                set_stat $ff-zero
                        
b190 : f002                     beq brzc1
b192 : d003                     bne brzc2
b194 :                  brzc1
                                trap            ;branch zero/non zero
                        
b197 : 9002             brzc2   bcc brzc3
b199 : b003                     bcs brzc4
b19b :                  brzc3
                                trap            ;branch carry/no carry
                        
b19e : 1002             brzc4   bpl brzc5
b1a0 : 3003                     bmi brzc6
b1a2 :                  brzc5
                                trap            ;branch minus/plus
                        
b1a5 : 5002             brzc6   bvc brzc7
b1a7 : 7003                     bvs brzc8
b1a9 :                  brzc7
                                trap            ;branch overflow/no overflow
                        
b1ac :                  brzc8
                                set_stat $ff-carry
                        
b1b0 : d002                     bne brcc1
b1b2 : f003                     beq brcc2
b1b4 :                  brcc1
                                trap            ;branch zero/non zero
                        
b1b7 : b002             brcc2   bcs brcc3
b1b9 : 9003                     bcc brcc4
b1bb :                  brcc3
                                trap            ;branch carry/no carry
                        
b1be : 1002             brcc4   bpl brcc5
b1c0 : 3003                     bmi brcc6
b1c2 :                  brcc5
                                trap            ;branch minus/plus
                        
b1c5 : 5002             brcc6   bvc brcc7
b1c7 : 7003                     bvs brcc8
b1c9 :                  brcc7
                                trap            ;branch overflow/no overflow
                        
b1cc :                  brcc8
                                set_stat $ff-minus
                        
b1d0 : d002                     bne brpl1
b1d2 : f003                     beq brpl2
b1d4 :                  brpl1
                                trap            ;branch zero/non zero
                        
b1d7 : 9002             brpl2   bcc brpl3
b1d9 : b003                     bcs brpl4
b1db :                  brpl3
                                trap            ;branch carry/no carry
                        
b1de : 3002             brpl4   bmi brpl5
b1e0 : 1003                     bpl brpl6
b1e2 :                  brpl5
                                trap            ;branch minus/plus
                        
b1e5 : 5002             brpl6   bvc brpl7
b1e7 : 7003                     bvs brpl8
b1e9 :                  brpl7
                                trap            ;branch overflow/no overflow
                        
b1ec :                  brpl8
                                set_stat $ff-overfl
                        
b1f0 : d002                     bne brvc1
b1f2 : f003                     beq brvc2
b1f4 :                  brvc1
                                trap            ;branch zero/non zero
                        
b1f7 : 9002             brvc2   bcc brvc3
b1f9 : b003                     bcs brvc4
b1fb :                  brvc3
                                trap            ;branch carry/no carry
                        
b1fe : 1002             brvc4   bpl brvc5
b200 : 3003                     bmi brvc6
b202 :                  brvc5
                                trap            ;branch minus/plus
                        
b205 : 7002             brvc6   bvs brvc7
b207 : 5003                     bvc brvc8
b209 :                  brvc7
                                trap            ;branch overflow/no overflow
                        
b20c :                  brvc8
                                next_test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
b21b : a255                     ldx #$55        ;x & y protected
b21d : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                        
b225 : 48                       pha
                                tst_a 1,$ff
                        
                                set_a 0,0
                        
b23e : 48                       pha
                                tst_a 0,0
                        
                                set_a $ff,$ff
                        
b257 : 48                       pha
                                tst_a $ff,$ff
                        
                                set_a 1,0
                        
b270 : 48                       pha
                                tst_a 1,0
                        
                                set_a 0,$ff
                        
b289 : 48                       pha
                                tst_a 0,$ff
                        
                                set_a $ff,0
                        
b2a2 : 48                       pha
                                tst_a $ff,0
                        
                                set_a 0,$ff     ;pull
                        
b2bb : 68                       pla
                                tst_a $ff,$ff-zero
                        
                                set_a $ff,0
                        
b2d4 : 68                       pla
                                tst_a 0,zero
                        
                                set_a $fe,$ff
                        
b2ed : 68                       pla
                                tst_a 1,$ff-zero-minus
                        
                                set_a 0,0
                        
b306 : 68                       pla
                                tst_a $ff,minus
                        
                                set_a $ff,$ff
                        
b31f : 68                       pla
                                tst_a 0,$ff-minus
                        
                                set_a $fe,0
                        
b338 : 68                       pla
                                tst_a 1,0
                        
b34b : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
                        
b352 : c0aa                     cpy #$aa
                                trap_ne
                        
                                next_test
                        
                        
                        ; partial pretest EOR #
                                set_a $3c,0
                        
b36e : 49c3                     eor #$c3
                                tst_a $ff,fn
                        
                                set_a $c3,0
                        
b388 : 49c3                     eor #$c3
                                tst_a 0,fz
                        
                                next_test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
b3ab : a224                     ldx #$24
b3ad : a042                     ldy #$42
                                set_a $18,0
                        
b3b5 : ea                       nop
                                tst_a $18,0
                        
b3c8 : e024                     cpx #$24
                                trap_ne
                        
b3cf : c042                     cpy #$42
                                trap_ne
                        
b3d6 : a2db                     ldx #$db
b3d8 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                        
b3e0 : ea                       nop
                                tst_a $e7,$ff
                        
b3f3 : e0db                     cpx #$db
                                trap_ne
                        
b3fa : c0bd                     cpy #$bd
                                trap_ne
                        
                                next_test
                        
                        
                        ; jump absolute
                                set_stat $0
                        
b414 : a946                     lda #'F'
b416 : a241                     ldx #'A'
b418 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
b41a : 4cccec                   jmp test_far
b41d : ea                       nop
b41e : ea                       nop
                                trap_ne         ;runover protection
                        
b424 : e8                       inx
b425 : e8                       inx
b426 :                  far_ret
                                trap_eq         ;returned flags OK?
                        
                                trap_pl
                        
                                trap_cc
                        
                                trap_vc
                        
b43a : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
                        
b441 : e042                     cpx #('A'+1)
                                trap_ne
                        
b448 : c04f                     cpy #('R'-3)
                                trap_ne
                        
b44f : ca                       dex
b450 : c8                       iny
b451 : c8                       iny
b452 : c8                       iny
b453 : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
b455 : 4c61b4                   jmp test_near
b458 : ea                       nop
b459 : ea                       nop
                                trap_ne         ;runover protection
                        
b45f : e8                       inx
b460 : e8                       inx
b461 :                  test_near
                                trap_eq         ;passed flags OK?
                        
                                trap_mi
                        
                                trap_cc
                        
                                trap_vc
                        
b475 : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
                        
b47c : e041                     cpx #'A'
                                trap_ne
                        
b483 : c052                     cpy #'R'
                                trap_ne
                        
                                next_test
                        
                        
                        ; jump indirect
                                set_stat 0
                        
b49d : a949                     lda #'I'
b49f : a24e                     ldx #'N'
b4a1 : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
b4a3 : 6c12ed                   jmp (ptr_tst_ind)
b4a6 : ea                       nop
                                trap_ne         ;runover protection
                        
b4ac : 88                       dey
b4ad : 88                       dey
b4ae :                  ind_ret
b4ae : 08                       php             ;either SP or Y count will fail, if we do not hit
b4af : 88                       dey
b4b0 : 88                       dey
b4b1 : 88                       dey
b4b2 : 28                       plp
                                trap_eq         ;returned flags OK?
                        
                                trap_pl
                        
                                trap_cc
                        
                                trap_vc
                        
b4c7 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
                        
b4ce : e04f                     cpx #('N'+1)
                                trap_ne
                        
b4d5 : c03e                     cpy #('D'-6)
                                trap_ne
                        
b4dc : ba                       tsx             ;SP check
b4dd : e0ff                     cpx #$ff
                                trap_ne
                        
                                next_test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                        
b4f7 : a94a                     lda #'J'
b4f9 : a253                     ldx #'S'
b4fb : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
b4fd : 2066ed                   jsr test_jsr
b4ff =                  jsr_ret = *-1           ;last address of jsr = return address
b500 : 08                       php             ;either SP or Y count will fail, if we do not hit
b501 : 88                       dey
b502 : 88                       dey
b503 : 88                       dey
b504 : 28                       plp
                                trap_eq         ;returned flags OK?
                        
                                trap_pl
                        
                                trap_cc
                        
                                trap_vc
                        
b519 : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
                        
b520 : e054                     cpx #('S'+1)
                                trap_ne
                        
b527 : c04c                     cpy #('R'-6)
                                trap_ne
                        
b52e : ba                       tsx             ;sp?
b52f : e0ff                     cpx #$ff
                                trap_ne
                        
                                next_test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                set_stat 0
                        
b549 : a942                     lda #'B'
b54b : a252                     ldx #'R'
b54d : a04b                     ldy #'K'        ;N=0, V=0, Z=0, C=0
b54f : 00                       brk
                            else
                                lda #hi brk_ret ;emulated break
                                pha
                                lda #lo brk_ret
                                pha
                                lda #fao        ;set break & unused on stack
                                pha
                                set_stat intdis
                                lda #'B'
                                ldx #'R'
                                ldy #'K'        ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
b550 : 88                       dey             ;should not be executed
b551 :                  brk_ret                 ;address of break return
b551 : 08                       php             ;either SP or Y count will fail, if we do not hit
b552 : 88                       dey
b553 : 88                       dey
b554 : 88                       dey
b555 : c9e8                     cmp #('B'^$aa)  ;returned registers OK?
                                trap_ne
                        
b55c : e053                     cpx #('R'+1)
                                trap_ne
                        
b563 : c045                     cpy #('K'-6)
                                trap_ne
                        
b56a : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
                        
                                trap_ne
                        
b572 : ba                       tsx             ;sp?
b573 : e0ff                     cpx #$ff
                                trap_ne
                        
                                next_test
                        
                        
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                        
b58d : 18                       clc
                                tst_stat $ff-carry
                        
b599 : 38                       sec
                                tst_stat $ff
                        
                            if I_flag = 3
b5a5 : 58                       cli
                                tst_stat $ff-intdis
                        
b5b1 : 78                       sei
                                tst_stat $ff
                        
                            endif
b5bd : d8                       cld
                                tst_stat $ff-decmode
                        
b5c9 : f8                       sed
                                tst_stat $ff
                        
b5d5 : b8                       clv
                                tst_stat $ff-overfl
                        
                                set_stat 0
                        
                                tst_stat 0
                        
b5f0 : 38                       sec
                                tst_stat carry
                        
b5fc : 18                       clc
                                tst_stat 0
                        
                            if I_flag = 3
b608 : 78                       sei
                                tst_stat intdis
                        
b614 : 58                       cli
                                tst_stat 0
                        
                            endif
b620 : f8                       sed
                                tst_stat decmode
                        
b62c : d8                       cld
                                tst_stat 0
                        
                                set_stat overfl
                        
                                tst_stat overfl
                        
b647 : b8                       clv
                                tst_stat 0
                        
                                next_test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA
b662 : a2fe                     ldx #$fe
                                set_stat $ff
                        
b668 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
                        
b67b : e8                       inx             ;00
                                tst_x 0,$ff-minus
                        
b68e : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
                        
b6a1 : ca                       dex             ;00
                                tst_x 0,$ff-minus
                        
b6b4 : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
                        
b6c7 : ca                       dex             ;fe
                                set_stat 0
                        
b6cc : e8                       inx             ;ff
                                tst_x $ff,minus
                        
b6df : e8                       inx             ;00
                                tst_x 0,zero
                        
b6f2 : e8                       inx             ;01
                                tst_x 1,0
                        
b705 : ca                       dex             ;00
                                tst_x 0,zero
                        
b718 : ca                       dex             ;ff
                                tst_x $ff,minus
                        
                        
b72b : a0fe                     ldy #$fe
                                set_stat $ff
                        
b731 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
                        
b744 : c8                       iny             ;00
                                tst_y 0,$ff-minus
                        
b757 : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
                        
b76a : 88                       dey             ;00
                                tst_y 0,$ff-minus
                        
b77d : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
                        
b790 : 88                       dey             ;fe
                                set_stat 0
                        
b795 : c8                       iny             ;ff
                                tst_y $ff,0+minus
                        
b7a8 : c8                       iny             ;00
                                tst_y 0,zero
                        
b7bb : c8                       iny             ;01
                                tst_y 1,0
                        
b7ce : 88                       dey             ;00
                                tst_y 0,zero
                        
b7e1 : 88                       dey             ;ff
                                tst_y $ff,minus
                        
                        
b7f4 : a2ff                     ldx #$ff
                                set_stat $ff
                        
b7fa : 8a                       txa
                                tst_a $ff,$ff-zero
                        
b80d : 08                       php
b80e : e8                       inx             ;00
b80f : 28                       plp
b810 : 8a                       txa
                                tst_a 0,$ff-minus
                        
b823 : 08                       php
b824 : e8                       inx             ;01
b825 : 28                       plp
b826 : 8a                       txa
                                tst_a 1,$ff-minus-zero
                        
                                set_stat 0
                        
b83d : 8a                       txa
                                tst_a 1,0
                        
b850 : 08                       php
b851 : ca                       dex             ;00
b852 : 28                       plp
b853 : 8a                       txa
                                tst_a 0,zero
                        
b866 : 08                       php
b867 : ca                       dex             ;ff
b868 : 28                       plp
b869 : 8a                       txa
                                tst_a $ff,minus
                        
                        
b87c : a0ff                     ldy #$ff
                                set_stat $ff
                        
b882 : 98                       tya
                                tst_a $ff,$ff-zero
                        
b895 : 08                       php
b896 : c8                       iny             ;00
b897 : 28                       plp
b898 : 98                       tya
                                tst_a 0,$ff-minus
                        
b8ab : 08                       php
b8ac : c8                       iny             ;01
b8ad : 28                       plp
b8ae : 98                       tya
                                tst_a 1,$ff-minus-zero
                        
                                set_stat 0
                        
b8c5 : 98                       tya
                                tst_a 1,0
                        
b8d8 : 08                       php
b8d9 : 88                       dey             ;00
b8da : 28                       plp
b8db : 98                       tya
                                tst_a 0,zero
                        
b8ee : 08                       php
b8ef : 88                       dey             ;ff
b8f0 : 28                       plp
b8f1 : 98                       tya
                                tst_a $ff,minus
                        
                        
                                load_flag $ff
                        
b906 : 48                       pha
b907 : a2ff                     ldx #$ff        ;ff
b909 : 8a                       txa
b90a : 28                       plp
b90b : a8                       tay
                                tst_y $ff,$ff-zero
                        
b91e : 08                       php
b91f : e8                       inx             ;00
b920 : 8a                       txa
b921 : 28                       plp
b922 : a8                       tay
                                tst_y 0,$ff-minus
                        
b935 : 08                       php
b936 : e8                       inx             ;01
b937 : 8a                       txa
b938 : 28                       plp
b939 : a8                       tay
                                tst_y 1,$ff-minus-zero
                        
                                load_flag 0
                        
b94e : 48                       pha
b94f : a900                     lda #0
b951 : 8a                       txa
b952 : 28                       plp
b953 : a8                       tay
                                tst_y 1,0
                        
b966 : 08                       php
b967 : ca                       dex             ;00
b968 : 8a                       txa
b969 : 28                       plp
b96a : a8                       tay
                                tst_y 0,zero
                        
b97d : 08                       php
b97e : ca                       dex             ;ff
b97f : 8a                       txa
b980 : 28                       plp
b981 : a8                       tay
                                tst_y $ff,minus
                        
                        
                        
                                load_flag $ff
                        
b996 : 48                       pha
b997 : a0ff                     ldy #$ff        ;ff
b999 : 98                       tya
b99a : 28                       plp
b99b : aa                       tax
                                tst_x $ff,$ff-zero
                        
b9ae : 08                       php
b9af : c8                       iny             ;00
b9b0 : 98                       tya
b9b1 : 28                       plp
b9b2 : aa                       tax
                                tst_x 0,$ff-minus
                        
b9c5 : 08                       php
b9c6 : c8                       iny             ;01
b9c7 : 98                       tya
b9c8 : 28                       plp
b9c9 : aa                       tax
                                tst_x 1,$ff-minus-zero
                        
                                load_flag 0
                        
b9de : 48                       pha
b9df : a900                     lda #0          ;preset status
b9e1 : 98                       tya
b9e2 : 28                       plp
b9e3 : aa                       tax
                                tst_x 1,0
                        
b9f6 : 08                       php
b9f7 : 88                       dey             ;00
b9f8 : 98                       tya
b9f9 : 28                       plp
b9fa : aa                       tax
                                tst_x 0,zero
                        
ba0d : 08                       php
ba0e : 88                       dey             ;ff
ba0f : 98                       tya
ba10 : 28                       plp
ba11 : aa                       tax
                                tst_x $ff,minus
                        
                                next_test
                        
                        
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
ba33 : a201                     ldx #1          ;01
                                set_stat $ff
                        
ba39 : 9a                       txs
ba3a : 08                       php
ba3b : ad0101                   lda $101
                                cmp_flag $ff
                        
                                trap_ne
                        
                                set_stat 0
                        
ba49 : 9a                       txs
ba4a : 08                       php
ba4b : ad0101                   lda $101
                                cmp_flag 0
                        
                                trap_ne
                        
ba55 : ca                       dex             ;00
                                set_stat $ff
                        
ba5a : 9a                       txs
ba5b : 08                       php
ba5c : ad0001                   lda $100
                                cmp_flag $ff
                        
                                trap_ne
                        
                                set_stat 0
                        
ba6a : 9a                       txs
ba6b : 08                       php
ba6c : ad0001                   lda $100
                                cmp_flag 0
                        
                                trap_ne
                        
ba76 : ca                       dex             ;ff
                                set_stat $ff
                        
ba7b : 9a                       txs
ba7c : 08                       php
ba7d : adff01                   lda $1ff
                                cmp_flag $ff
                        
                                trap_ne
                        
                                set_stat 0
                        
ba8b : 9a                       txs
ba8c : 08                       php
ba8d : adff01                   lda $1ff
                                cmp_flag 0
                        
                        
ba92 : a201                     ldx #1
ba94 : 9a                       txs             ;sp=01
                                set_stat $ff
                        
ba99 : ba                       tsx             ;clears Z, N
ba9a : 08                       php             ;sp=00
ba9b : e001                     cpx #1
                                trap_ne
                        
baa2 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
                        
                                trap_ne
                        
                                set_stat $ff
                        
bab0 : ba                       tsx             ;clears N, sets Z
bab1 : 08                       php             ;sp=ff
bab2 : e000                     cpx #0
                                trap_ne
                        
bab9 : ad0001                   lda $100
                                cmp_flag $ff-minus
                        
                                trap_ne
                        
                                set_stat $ff
                        
bac7 : ba                       tsx             ;clears N, sets Z
bac8 : 08                       php             ;sp=fe
bac9 : e0ff                     cpx #$ff
                                trap_ne
                        
bad0 : adff01                   lda $1ff
                                cmp_flag $ff-zero
                        
                                trap_ne
                        
                        
bada : a201                     ldx #1
badc : 9a                       txs             ;sp=01
                                set_stat 0
                        
bae1 : ba                       tsx             ;clears Z, N
bae2 : 08                       php             ;sp=00
bae3 : e001                     cpx #1
                                trap_ne
                        
baea : ad0101                   lda $101
                                cmp_flag 0
                        
                                trap_ne
                        
                                set_stat 0
                        
baf8 : ba                       tsx             ;clears N, sets Z
baf9 : 08                       php             ;sp=ff
bafa : e000                     cpx #0
                                trap_ne
                        
bb01 : ad0001                   lda $100
                                cmp_flag zero
                        
                                trap_ne
                        
                                set_stat 0
                        
bb0f : ba                       tsx             ;clears N, sets Z
bb10 : 08                       php             ;sp=fe
bb11 : e0ff                     cpx #$ff
                                trap_ne
                        
bb18 : adff01                   lda $1ff
                                cmp_flag minus
                        
                                trap_ne
                        
bb22 : 68                       pla             ;sp=ff
                                next_test
                        
                        
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
bb32 : a003                     ldy #3
bb34 :                  tldx
                                set_stat 0
                        
bb38 : b613                     ldx zp1,y
bb3a : 08                       php         ;test stores do not alter flags
bb3b : 8a                       txa
bb3c : 49c3                     eor #$c3
bb3e : 28                       plp
bb3f : 990302                   sta abst,y
bb42 : 08                       php         ;flags after load/store sequence
bb43 : 49c3                     eor #$c3
bb45 : d91702                   cmp abs1,y  ;test result
                                trap_ne
                        
bb4d : 68                       pla         ;load status
                                eor_flag 0
                        
bb50 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
bb58 : 88                       dey
bb59 : 10d9                     bpl tldx
                        
bb5b : a003                     ldy #3
bb5d :                  tldx1
                                set_stat $ff
                        
bb61 : b613                     ldx zp1,y
bb63 : 08                       php         ;test stores do not alter flags
bb64 : 8a                       txa
bb65 : 49c3                     eor #$c3
bb67 : 28                       plp
bb68 : 990302                   sta abst,y
bb6b : 08                       php         ;flags after load/store sequence
bb6c : 49c3                     eor #$c3
bb6e : d91702                   cmp abs1,y  ;test result
                                trap_ne
                        
bb76 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
bb79 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
bb81 : 88                       dey
bb82 : 10d9                     bpl tldx1
                        
bb84 : a003                     ldy #3
bb86 :                  tldx2
                                set_stat 0
                        
bb8a : be1702                   ldx abs1,y
bb8d : 08                       php         ;test stores do not alter flags
bb8e : 8a                       txa
bb8f : 49c3                     eor #$c3
bb91 : aa                       tax
bb92 : 28                       plp
bb93 : 960c                     stx zpt,y
bb95 : 08                       php         ;flags after load/store sequence
bb96 : 49c3                     eor #$c3
bb98 : d91300                   cmp zp1,y   ;test result
                                trap_ne
                        
bba0 : 68                       pla         ;load status
                                eor_flag 0
                        
bba3 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
bbab : 88                       dey
bbac : 10d8                     bpl tldx2
                        
bbae : a003                     ldy #3
bbb0 :                  tldx3
                                set_stat $ff
                        
bbb4 : be1702                   ldx abs1,y
bbb7 : 08                       php         ;test stores do not alter flags
bbb8 : 8a                       txa
bbb9 : 49c3                     eor #$c3
bbbb : aa                       tax
bbbc : 28                       plp
bbbd : 960c                     stx zpt,y
bbbf : 08                       php         ;flags after load/store sequence
bbc0 : 49c3                     eor #$c3
bbc2 : d91300                   cmp zp1,y   ;test result
                                trap_ne
                        
bbca : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
bbcd : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
bbd5 : 88                       dey
bbd6 : 10d8                     bpl tldx3
                        
bbd8 : a003                     ldy #3      ;testing store result
bbda : a200                     ldx #0
bbdc : b90c00           tstx    lda zpt,y
bbdf : 49c3                     eor #$c3
bbe1 : d91300                   cmp zp1,y
                                trap_ne     ;store to zp data
                        
bbe9 : 960c                     stx zpt,y   ;clear
bbeb : b90302                   lda abst,y
bbee : 49c3                     eor #$c3
bbf0 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
bbf8 : 8a                       txa
bbf9 : 990302                   sta abst,y  ;clear
bbfc : 88                       dey
bbfd : 10dd                     bpl tstx
                                next_test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
bc0e : a0fd                     ldy #3+$fa
bc10 : b619             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
bc12 : 8a                       txa
bc13 : 990901                   sta abst-$fa,y      ;no STX abs,y!
bc16 : 88                       dey
bc17 : c0fa                     cpy #$fa
bc19 : b0f5                     bcs tldx4
bc1b : a0fd                     ldy #3+$fa
bc1d : be1d01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
bc20 : 9612                     stx zpt-$fa&$ff,y
bc22 : 88                       dey
bc23 : c0fa                     cpy #$fa
bc25 : b0f6                     bcs tldx5
bc27 : a003                     ldy #3      ;testing wraparound result
bc29 : a200                     ldx #0
bc2b : b90c00           tstx1   lda zpt,y
bc2e : d91300                   cmp zp1,y
                                trap_ne     ;store to zp data
                        
bc36 : 960c                     stx zpt,y   ;clear
bc38 : b90302                   lda abst,y
bc3b : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
bc43 : 8a                       txa
bc44 : 990302                   sta abst,y  ;clear
bc47 : 88                       dey
bc48 : 10e1                     bpl tstx1
                                next_test
                        
                        
                        ; LDY / STY - zp,x / abs,x
bc59 : a203                     ldx #3
bc5b :                  tldy
                                set_stat 0
                        
bc5f : b413                     ldy zp1,x
bc61 : 08                       php         ;test stores do not alter flags
bc62 : 98                       tya
bc63 : 49c3                     eor #$c3
bc65 : 28                       plp
bc66 : 9d0302                   sta abst,x
bc69 : 08                       php         ;flags after load/store sequence
bc6a : 49c3                     eor #$c3
bc6c : dd1702                   cmp abs1,x  ;test result
                                trap_ne
                        
bc74 : 68                       pla         ;load status
                                eor_flag 0
                        
bc77 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
bc7f : ca                       dex
bc80 : 10d9                     bpl tldy
                        
bc82 : a203                     ldx #3
bc84 :                  tldy1
                                set_stat $ff
                        
bc88 : b413                     ldy zp1,x
bc8a : 08                       php         ;test stores do not alter flags
bc8b : 98                       tya
bc8c : 49c3                     eor #$c3
bc8e : 28                       plp
bc8f : 9d0302                   sta abst,x
bc92 : 08                       php         ;flags after load/store sequence
bc93 : 49c3                     eor #$c3
bc95 : dd1702                   cmp abs1,x  ;test result
                                trap_ne
                        
bc9d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
bca0 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
bca8 : ca                       dex
bca9 : 10d9                     bpl tldy1
                        
bcab : a203                     ldx #3
bcad :                  tldy2
                                set_stat 0
                        
bcb1 : bc1702                   ldy abs1,x
bcb4 : 08                       php         ;test stores do not alter flags
bcb5 : 98                       tya
bcb6 : 49c3                     eor #$c3
bcb8 : a8                       tay
bcb9 : 28                       plp
bcba : 940c                     sty zpt,x
bcbc : 08                       php         ;flags after load/store sequence
bcbd : 49c3                     eor #$c3
bcbf : d513                     cmp zp1,x   ;test result
                                trap_ne
                        
bcc6 : 68                       pla         ;load status
                                eor_flag 0
                        
bcc9 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
bcd1 : ca                       dex
bcd2 : 10d9                     bpl tldy2
                        
bcd4 : a203                     ldx #3
bcd6 :                  tldy3
                                set_stat $ff
                        
bcda : bc1702                   ldy abs1,x
bcdd : 08                       php         ;test stores do not alter flags
bcde : 98                       tya
bcdf : 49c3                     eor #$c3
bce1 : a8                       tay
bce2 : 28                       plp
bce3 : 940c                     sty zpt,x
bce5 : 08                       php         ;flags after load/store sequence
bce6 : 49c3                     eor #$c3
bce8 : d513                     cmp zp1,x   ;test result
                                trap_ne
                        
bcef : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
bcf2 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
bcfa : ca                       dex
bcfb : 10d9                     bpl tldy3
                        
bcfd : a203                     ldx #3      ;testing store result
bcff : a000                     ldy #0
bd01 : b50c             tsty    lda zpt,x
bd03 : 49c3                     eor #$c3
bd05 : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
bd0c : 940c                     sty zpt,x   ;clear
bd0e : bd0302                   lda abst,x
bd11 : 49c3                     eor #$c3
bd13 : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
bd1b : 8a                       txa
bd1c : 9d0302                   sta abst,x  ;clear
bd1f : ca                       dex
bd20 : 10df                     bpl tsty
                                next_test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
bd31 : a2fd                     ldx #3+$fa
bd33 : b419             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
bd35 : 98                       tya
bd36 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
bd39 : ca                       dex
bd3a : e0fa                     cpx #$fa
bd3c : b0f5                     bcs tldy4
bd3e : a2fd                     ldx #3+$fa
bd40 : bc1d01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
bd43 : 9412                     sty zpt-$fa&$ff,x
bd45 : ca                       dex
bd46 : e0fa                     cpx #$fa
bd48 : b0f6                     bcs tldy5
bd4a : a203                     ldx #3      ;testing wraparound result
bd4c : a000                     ldy #0
bd4e : b50c             tsty1   lda zpt,x
bd50 : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
bd57 : 940c                     sty zpt,x   ;clear
bd59 : bd0302                   lda abst,x
bd5c : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
bd64 : 8a                       txa
bd65 : 9d0302                   sta abst,x  ;clear
bd68 : ca                       dex
bd69 : 10e3                     bpl tsty1
                                next_test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0
                        
bd7e : a613                     ldx zp1
bd80 : 08                       php         ;test stores do not alter flags
bd81 : 8a                       txa
bd82 : 49c3                     eor #$c3
bd84 : aa                       tax
bd85 : 28                       plp
bd86 : 8e0302                   stx abst
bd89 : 08                       php         ;flags after load/store sequence
bd8a : 49c3                     eor #$c3
bd8c : aa                       tax
bd8d : e0c3                     cpx #$c3    ;test result
                                trap_ne
                        
bd94 : 68                       pla         ;load status
                                eor_flag 0
                        
bd97 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
bda3 : a614                     ldx zp1+1
bda5 : 08                       php         ;test stores do not alter flags
bda6 : 8a                       txa
bda7 : 49c3                     eor #$c3
bda9 : aa                       tax
bdaa : 28                       plp
bdab : 8e0402                   stx abst+1
bdae : 08                       php         ;flags after load/store sequence
bdaf : 49c3                     eor #$c3
bdb1 : aa                       tax
bdb2 : e082                     cpx #$82    ;test result
                                trap_ne
                        
bdb9 : 68                       pla         ;load status
                                eor_flag 0
                        
bdbc : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
bdc8 : a615                     ldx zp1+2
bdca : 08                       php         ;test stores do not alter flags
bdcb : 8a                       txa
bdcc : 49c3                     eor #$c3
bdce : aa                       tax
bdcf : 28                       plp
bdd0 : 8e0502                   stx abst+2
bdd3 : 08                       php         ;flags after load/store sequence
bdd4 : 49c3                     eor #$c3
bdd6 : aa                       tax
bdd7 : e041                     cpx #$41    ;test result
                                trap_ne
                        
bdde : 68                       pla         ;load status
                                eor_flag 0
                        
bde1 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
bded : a616                     ldx zp1+3
bdef : 08                       php         ;test stores do not alter flags
bdf0 : 8a                       txa
bdf1 : 49c3                     eor #$c3
bdf3 : aa                       tax
bdf4 : 28                       plp
bdf5 : 8e0602                   stx abst+3
bdf8 : 08                       php         ;flags after load/store sequence
bdf9 : 49c3                     eor #$c3
bdfb : aa                       tax
bdfc : e000                     cpx #0      ;test result
                                trap_ne
                        
be03 : 68                       pla         ;load status
                                eor_flag 0
                        
be06 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
be12 : a613                     ldx zp1
be14 : 08                       php         ;test stores do not alter flags
be15 : 8a                       txa
be16 : 49c3                     eor #$c3
be18 : aa                       tax
be19 : 28                       plp
be1a : 8e0302                   stx abst
be1d : 08                       php         ;flags after load/store sequence
be1e : 49c3                     eor #$c3
be20 : aa                       tax
be21 : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
                        
be28 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
be2b : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
be37 : a614                     ldx zp1+1
be39 : 08                       php         ;test stores do not alter flags
be3a : 8a                       txa
be3b : 49c3                     eor #$c3
be3d : aa                       tax
be3e : 28                       plp
be3f : 8e0402                   stx abst+1
be42 : 08                       php         ;flags after load/store sequence
be43 : 49c3                     eor #$c3
be45 : aa                       tax
be46 : e082                     cpx #$82    ;test result
                                trap_ne
                        
be4d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
be50 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
be5c : a615                     ldx zp1+2
be5e : 08                       php         ;test stores do not alter flags
be5f : 8a                       txa
be60 : 49c3                     eor #$c3
be62 : aa                       tax
be63 : 28                       plp
be64 : 8e0502                   stx abst+2
be67 : 08                       php         ;flags after load/store sequence
be68 : 49c3                     eor #$c3
be6a : aa                       tax
be6b : e041                     cpx #$41    ;test result
                                trap_ne     ;
                        
be72 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
be75 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
be81 : a616                     ldx zp1+3
be83 : 08                       php         ;test stores do not alter flags
be84 : 8a                       txa
be85 : 49c3                     eor #$c3
be87 : aa                       tax
be88 : 28                       plp
be89 : 8e0602                   stx abst+3
be8c : 08                       php         ;flags after load/store sequence
be8d : 49c3                     eor #$c3
be8f : aa                       tax
be90 : e000                     cpx #0      ;test result
                                trap_ne
                        
be97 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
be9a : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat 0
                        
bea6 : ae1702                   ldx abs1
bea9 : 08                       php         ;test stores do not alter flags
beaa : 8a                       txa
beab : 49c3                     eor #$c3
bead : aa                       tax
beae : 28                       plp
beaf : 860c                     stx zpt
beb1 : 08                       php         ;flags after load/store sequence
beb2 : 49c3                     eor #$c3
beb4 : c513                     cmp zp1     ;test result
                                trap_ne
                        
bebb : 68                       pla         ;load status
                                eor_flag 0
                        
bebe : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
beca : ae1802                   ldx abs1+1
becd : 08                       php         ;test stores do not alter flags
bece : 8a                       txa
becf : 49c3                     eor #$c3
bed1 : aa                       tax
bed2 : 28                       plp
bed3 : 860d                     stx zpt+1
bed5 : 08                       php         ;flags after load/store sequence
bed6 : 49c3                     eor #$c3
bed8 : c514                     cmp zp1+1   ;test result
                                trap_ne
                        
bedf : 68                       pla         ;load status
                                eor_flag 0
                        
bee2 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
beee : ae1902                   ldx abs1+2
bef1 : 08                       php         ;test stores do not alter flags
bef2 : 8a                       txa
bef3 : 49c3                     eor #$c3
bef5 : aa                       tax
bef6 : 28                       plp
bef7 : 860e                     stx zpt+2
bef9 : 08                       php         ;flags after load/store sequence
befa : 49c3                     eor #$c3
befc : c515                     cmp zp1+2   ;test result
                                trap_ne
                        
bf03 : 68                       pla         ;load status
                                eor_flag 0
                        
bf06 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
bf12 : ae1a02                   ldx abs1+3
bf15 : 08                       php         ;test stores do not alter flags
bf16 : 8a                       txa
bf17 : 49c3                     eor #$c3
bf19 : aa                       tax
bf1a : 28                       plp
bf1b : 860f                     stx zpt+3
bf1d : 08                       php         ;flags after load/store sequence
bf1e : 49c3                     eor #$c3
bf20 : c516                     cmp zp1+3   ;test result
                                trap_ne
                        
bf27 : 68                       pla         ;load status
                                eor_flag 0
                        
bf2a : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
bf36 : ae1702                   ldx abs1
bf39 : 08                       php         ;test stores do not alter flags
bf3a : 8a                       txa
bf3b : 49c3                     eor #$c3
bf3d : aa                       tax
bf3e : 28                       plp
bf3f : 860c                     stx zpt
bf41 : 08                       php         ;flags after load/store sequence
bf42 : 49c3                     eor #$c3
bf44 : aa                       tax
bf45 : e413                     cpx zp1     ;test result
                                trap_ne
                        
bf4c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
bf4f : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
bf5b : ae1802                   ldx abs1+1
bf5e : 08                       php         ;test stores do not alter flags
bf5f : 8a                       txa
bf60 : 49c3                     eor #$c3
bf62 : aa                       tax
bf63 : 28                       plp
bf64 : 860d                     stx zpt+1
bf66 : 08                       php         ;flags after load/store sequence
bf67 : 49c3                     eor #$c3
bf69 : aa                       tax
bf6a : e414                     cpx zp1+1   ;test result
                                trap_ne
                        
bf71 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
bf74 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
bf80 : ae1902                   ldx abs1+2
bf83 : 08                       php         ;test stores do not alter flags
bf84 : 8a                       txa
bf85 : 49c3                     eor #$c3
bf87 : aa                       tax
bf88 : 28                       plp
bf89 : 860e                     stx zpt+2
bf8b : 08                       php         ;flags after load/store sequence
bf8c : 49c3                     eor #$c3
bf8e : aa                       tax
bf8f : e415                     cpx zp1+2   ;test result
                                trap_ne
                        
bf96 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
bf99 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
bfa5 : ae1a02                   ldx abs1+3
bfa8 : 08                       php         ;test stores do not alter flags
bfa9 : 8a                       txa
bfaa : 49c3                     eor #$c3
bfac : aa                       tax
bfad : 28                       plp
bfae : 860f                     stx zpt+3
bfb0 : 08                       php         ;flags after load/store sequence
bfb1 : 49c3                     eor #$c3
bfb3 : aa                       tax
bfb4 : e416                     cpx zp1+3   ;test result
                                trap_ne
                        
bfbb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
bfbe : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat 0
                        
bfca : a2c3                     ldx #$c3
bfcc : 08                       php
bfcd : ec1702                   cpx abs1    ;test result
                                trap_ne
                        
bfd5 : 68                       pla         ;load status
                                eor_flag 0
                        
bfd8 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
bfe4 : a282                     ldx #$82
bfe6 : 08                       php
bfe7 : ec1802                   cpx abs1+1  ;test result
                                trap_ne
                        
bfef : 68                       pla         ;load status
                                eor_flag 0
                        
bff2 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
bffe : a241                     ldx #$41
c000 : 08                       php
c001 : ec1902                   cpx abs1+2  ;test result
                                trap_ne
                        
c009 : 68                       pla         ;load status
                                eor_flag 0
                        
c00c : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c018 : a200                     ldx #0
c01a : 08                       php
c01b : ec1a02                   cpx abs1+3  ;test result
                                trap_ne
                        
c023 : 68                       pla         ;load status
                                eor_flag 0
                        
c026 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
c032 : a2c3                     ldx #$c3
c034 : 08                       php
c035 : ec1702                   cpx abs1    ;test result
                                trap_ne
                        
c03d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c040 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c04c : a282                     ldx #$82
c04e : 08                       php
c04f : ec1802                   cpx abs1+1  ;test result
                                trap_ne
                        
c057 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c05a : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c066 : a241                     ldx #$41
c068 : 08                       php
c069 : ec1902                   cpx abs1+2  ;test result
                                trap_ne
                        
c071 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c074 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c080 : a200                     ldx #0
c082 : 08                       php
c083 : ec1a02                   cpx abs1+3  ;test result
                                trap_ne
                        
c08b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c08e : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
c096 : a200                     ldx #0
c098 : a50c                     lda zpt
c09a : 49c3                     eor #$c3
c09c : c513                     cmp zp1
                                trap_ne     ;store to zp data
                        
c0a3 : 860c                     stx zpt     ;clear
c0a5 : ad0302                   lda abst
c0a8 : 49c3                     eor #$c3
c0aa : cd1702                   cmp abs1
                                trap_ne     ;store to abs data
                        
c0b2 : 8e0302                   stx abst    ;clear
c0b5 : a50d                     lda zpt+1
c0b7 : 49c3                     eor #$c3
c0b9 : c514                     cmp zp1+1
                                trap_ne     ;store to zp data
                        
c0c0 : 860d                     stx zpt+1   ;clear
c0c2 : ad0402                   lda abst+1
c0c5 : 49c3                     eor #$c3
c0c7 : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs data
                        
c0cf : 8e0402                   stx abst+1  ;clear
c0d2 : a50e                     lda zpt+2
c0d4 : 49c3                     eor #$c3
c0d6 : c515                     cmp zp1+2
                                trap_ne     ;store to zp data
                        
c0dd : 860e                     stx zpt+2   ;clear
c0df : ad0502                   lda abst+2
c0e2 : 49c3                     eor #$c3
c0e4 : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs data
                        
c0ec : 8e0502                   stx abst+2  ;clear
c0ef : a50f                     lda zpt+3
c0f1 : 49c3                     eor #$c3
c0f3 : c516                     cmp zp1+3
                                trap_ne     ;store to zp data
                        
c0fa : 860f                     stx zpt+3   ;clear
c0fc : ad0602                   lda abst+3
c0ff : 49c3                     eor #$c3
c101 : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs data
                        
c109 : 8e0602                   stx abst+3  ;clear
                                next_test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                        
c11f : a413                     ldy zp1
c121 : 08                       php         ;test stores do not alter flags
c122 : 98                       tya
c123 : 49c3                     eor #$c3
c125 : a8                       tay
c126 : 28                       plp
c127 : 8c0302                   sty abst
c12a : 08                       php         ;flags after load/store sequence
c12b : 49c3                     eor #$c3
c12d : a8                       tay
c12e : c0c3                     cpy #$c3    ;test result
                                trap_ne
                        
c135 : 68                       pla         ;load status
                                eor_flag 0
                        
c138 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c144 : a414                     ldy zp1+1
c146 : 08                       php         ;test stores do not alter flags
c147 : 98                       tya
c148 : 49c3                     eor #$c3
c14a : a8                       tay
c14b : 28                       plp
c14c : 8c0402                   sty abst+1
c14f : 08                       php         ;flags after load/store sequence
c150 : 49c3                     eor #$c3
c152 : a8                       tay
c153 : c082                     cpy #$82    ;test result
                                trap_ne
                        
c15a : 68                       pla         ;load status
                                eor_flag 0
                        
c15d : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c169 : a415                     ldy zp1+2
c16b : 08                       php         ;test stores do not alter flags
c16c : 98                       tya
c16d : 49c3                     eor #$c3
c16f : a8                       tay
c170 : 28                       plp
c171 : 8c0502                   sty abst+2
c174 : 08                       php         ;flags after load/store sequence
c175 : 49c3                     eor #$c3
c177 : a8                       tay
c178 : c041                     cpy #$41    ;test result
                                trap_ne
                        
c17f : 68                       pla         ;load status
                                eor_flag 0
                        
c182 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c18e : a416                     ldy zp1+3
c190 : 08                       php         ;test stores do not alter flags
c191 : 98                       tya
c192 : 49c3                     eor #$c3
c194 : a8                       tay
c195 : 28                       plp
c196 : 8c0602                   sty abst+3
c199 : 08                       php         ;flags after load/store sequence
c19a : 49c3                     eor #$c3
c19c : a8                       tay
c19d : c000                     cpy #0      ;test result
                                trap_ne
                        
c1a4 : 68                       pla         ;load status
                                eor_flag 0
                        
c1a7 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
c1b3 : a413                     ldy zp1
c1b5 : 08                       php         ;test stores do not alter flags
c1b6 : 98                       tya
c1b7 : 49c3                     eor #$c3
c1b9 : a8                       tay
c1ba : 28                       plp
c1bb : 8c0302                   sty abst
c1be : 08                       php         ;flags after load/store sequence
c1bf : 49c3                     eor #$c3
c1c1 : a8                       tay
c1c2 : c0c3                     cpy #$c3    ;test result
                                trap_ne
                        
c1c9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c1cc : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c1d8 : a414                     ldy zp1+1
c1da : 08                       php         ;test stores do not alter flags
c1db : 98                       tya
c1dc : 49c3                     eor #$c3
c1de : a8                       tay
c1df : 28                       plp
c1e0 : 8c0402                   sty abst+1
c1e3 : 08                       php         ;flags after load/store sequence
c1e4 : 49c3                     eor #$c3
c1e6 : a8                       tay
c1e7 : c082                     cpy #$82   ;test result
                                trap_ne
                        
c1ee : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c1f1 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c1fd : a415                     ldy zp1+2
c1ff : 08                       php         ;test stores do not alter flags
c200 : 98                       tya
c201 : 49c3                     eor #$c3
c203 : a8                       tay
c204 : 28                       plp
c205 : 8c0502                   sty abst+2
c208 : 08                       php         ;flags after load/store sequence
c209 : 49c3                     eor #$c3
c20b : a8                       tay
c20c : c041                     cpy #$41    ;test result
                                trap_ne
                        
c213 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c216 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c222 : a416                     ldy zp1+3
c224 : 08                       php         ;test stores do not alter flags
c225 : 98                       tya
c226 : 49c3                     eor #$c3
c228 : a8                       tay
c229 : 28                       plp
c22a : 8c0602                   sty abst+3
c22d : 08                       php         ;flags after load/store sequence
c22e : 49c3                     eor #$c3
c230 : a8                       tay
c231 : c000                     cpy #0      ;test result
                                trap_ne
                        
c238 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c23b : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat 0
                        
c247 : ac1702                   ldy abs1
c24a : 08                       php         ;test stores do not alter flags
c24b : 98                       tya
c24c : 49c3                     eor #$c3
c24e : a8                       tay
c24f : 28                       plp
c250 : 840c                     sty zpt
c252 : 08                       php         ;flags after load/store sequence
c253 : 49c3                     eor #$c3
c255 : a8                       tay
c256 : c413                     cpy zp1     ;test result
                                trap_ne
                        
c25d : 68                       pla         ;load status
                                eor_flag 0
                        
c260 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c26c : ac1802                   ldy abs1+1
c26f : 08                       php         ;test stores do not alter flags
c270 : 98                       tya
c271 : 49c3                     eor #$c3
c273 : a8                       tay
c274 : 28                       plp
c275 : 840d                     sty zpt+1
c277 : 08                       php         ;flags after load/store sequence
c278 : 49c3                     eor #$c3
c27a : a8                       tay
c27b : c414                     cpy zp1+1   ;test result
                                trap_ne
                        
c282 : 68                       pla         ;load status
                                eor_flag 0
                        
c285 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c291 : ac1902                   ldy abs1+2
c294 : 08                       php         ;test stores do not alter flags
c295 : 98                       tya
c296 : 49c3                     eor #$c3
c298 : a8                       tay
c299 : 28                       plp
c29a : 840e                     sty zpt+2
c29c : 08                       php         ;flags after load/store sequence
c29d : 49c3                     eor #$c3
c29f : a8                       tay
c2a0 : c415                     cpy zp1+2   ;test result
                                trap_ne
                        
c2a7 : 68                       pla         ;load status
                                eor_flag 0
                        
c2aa : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c2b6 : ac1a02                   ldy abs1+3
c2b9 : 08                       php         ;test stores do not alter flags
c2ba : 98                       tya
c2bb : 49c3                     eor #$c3
c2bd : a8                       tay
c2be : 28                       plp
c2bf : 840f                     sty zpt+3
c2c1 : 08                       php         ;flags after load/store sequence
c2c2 : 49c3                     eor #$c3
c2c4 : a8                       tay
c2c5 : c416                     cpy zp1+3   ;test result
                                trap_ne
                        
c2cc : 68                       pla         ;load status
                                eor_flag 0
                        
c2cf : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
c2db : ac1702                   ldy abs1
c2de : 08                       php         ;test stores do not alter flags
c2df : 98                       tya
c2e0 : 49c3                     eor #$c3
c2e2 : a8                       tay
c2e3 : 28                       plp
c2e4 : 840c                     sty zpt
c2e6 : 08                       php         ;flags after load/store sequence
c2e7 : 49c3                     eor #$c3
c2e9 : a8                       tay
c2ea : c513                     cmp zp1     ;test result
                                trap_ne
                        
c2f1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c2f4 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c300 : ac1802                   ldy abs1+1
c303 : 08                       php         ;test stores do not alter flags
c304 : 98                       tya
c305 : 49c3                     eor #$c3
c307 : a8                       tay
c308 : 28                       plp
c309 : 840d                     sty zpt+1
c30b : 08                       php         ;flags after load/store sequence
c30c : 49c3                     eor #$c3
c30e : a8                       tay
c30f : c514                     cmp zp1+1   ;test result
                                trap_ne
                        
c316 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c319 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c325 : ac1902                   ldy abs1+2
c328 : 08                       php         ;test stores do not alter flags
c329 : 98                       tya
c32a : 49c3                     eor #$c3
c32c : a8                       tay
c32d : 28                       plp
c32e : 840e                     sty zpt+2
c330 : 08                       php         ;flags after load/store sequence
c331 : 49c3                     eor #$c3
c333 : a8                       tay
c334 : c515                     cmp zp1+2   ;test result
                                trap_ne
                        
c33b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c33e : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c34a : ac1a02                   ldy abs1+3
c34d : 08                       php         ;test stores do not alter flags
c34e : 98                       tya
c34f : 49c3                     eor #$c3
c351 : a8                       tay
c352 : 28                       plp
c353 : 840f                     sty zpt+3
c355 : 08                       php         ;flags after load/store sequence
c356 : 49c3                     eor #$c3
c358 : a8                       tay
c359 : c516                     cmp zp1+3   ;test result
                                trap_ne
                        
c360 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c363 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                        
                                set_stat 0
                        
c36f : a0c3                     ldy #$c3
c371 : 08                       php
c372 : cc1702                   cpy abs1    ;test result
                                trap_ne
                        
c37a : 68                       pla         ;load status
                                eor_flag 0
                        
c37d : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c389 : a082                     ldy #$82
c38b : 08                       php
c38c : cc1802                   cpy abs1+1  ;test result
                                trap_ne
                        
c394 : 68                       pla         ;load status
                                eor_flag 0
                        
c397 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c3a3 : a041                     ldy #$41
c3a5 : 08                       php
c3a6 : cc1902                   cpy abs1+2  ;test result
                                trap_ne
                        
c3ae : 68                       pla         ;load status
                                eor_flag 0
                        
c3b1 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c3bd : a000                     ldy #0
c3bf : 08                       php
c3c0 : cc1a02                   cpy abs1+3  ;test result
                                trap_ne
                        
c3c8 : 68                       pla         ;load status
                                eor_flag 0
                        
c3cb : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
c3d7 : a0c3                     ldy #$c3
c3d9 : 08                       php
c3da : cc1702                   cpy abs1    ;test result
                                trap_ne
                        
c3e2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c3e5 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c3f1 : a082                     ldy #$82
c3f3 : 08                       php
c3f4 : cc1802                   cpy abs1+1  ;test result
                                trap_ne
                        
c3fc : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c3ff : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c40b : a041                     ldy #$41
c40d : 08                       php
c40e : cc1902                   cpy abs1+2   ;test result
                                trap_ne
                        
c416 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c419 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c425 : a000                     ldy #0
c427 : 08                       php
c428 : cc1a02                   cpy abs1+3  ;test result
                                trap_ne
                        
c430 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c433 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
c43b : a000                     ldy #0
c43d : a50c                     lda zpt
c43f : 49c3                     eor #$c3
c441 : c513                     cmp zp1
                                trap_ne     ;store to zp   data
                        
c448 : 840c                     sty zpt     ;clear
c44a : ad0302                   lda abst
c44d : 49c3                     eor #$c3
c44f : cd1702                   cmp abs1
                                trap_ne     ;store to abs   data
                        
c457 : 8c0302                   sty abst    ;clear
c45a : a50d                     lda zpt+1
c45c : 49c3                     eor #$c3
c45e : c514                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
                        
c465 : 840d                     sty zpt+1   ;clear
c467 : ad0402                   lda abst+1
c46a : 49c3                     eor #$c3
c46c : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
                        
c474 : 8c0402                   sty abst+1  ;clear
c477 : a50e                     lda zpt+2
c479 : 49c3                     eor #$c3
c47b : c515                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
                        
c482 : 840e                     sty zpt+2   ;clear
c484 : ad0502                   lda abst+2
c487 : 49c3                     eor #$c3
c489 : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
                        
c491 : 8c0502                   sty abst+2  ;clear
c494 : a50f                     lda zpt+3
c496 : 49c3                     eor #$c3
c498 : c516                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
                        
c49f : 840f                     sty zpt+3   ;clear
c4a1 : ad0602                   lda abst+3
c4a4 : 49c3                     eor #$c3
c4a6 : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
                        
c4ae : 8c0602                   sty abst+3  ;clear
                                next_test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
c4c0 : a203                     ldx #3
c4c2 :                  tldax
                                set_stat 0
                        
c4c6 : b513                     lda zp1,x
c4c8 : 08                       php         ;test stores do not alter flags
c4c9 : 49c3                     eor #$c3
c4cb : 28                       plp
c4cc : 9d0302                   sta abst,x
c4cf : 08                       php         ;flags after load/store sequence
c4d0 : 49c3                     eor #$c3
c4d2 : dd1702                   cmp abs1,x  ;test result
                                trap_ne
                        
c4da : 68                       pla         ;load status
                                eor_flag 0
                        
c4dd : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
c4e5 : ca                       dex
c4e6 : 10da                     bpl tldax
                        
c4e8 : a203                     ldx #3
c4ea :                  tldax1
                                set_stat $ff
                        
c4ee : b513                     lda zp1,x
c4f0 : 08                       php         ;test stores do not alter flags
c4f1 : 49c3                     eor #$c3
c4f3 : 28                       plp
c4f4 : 9d0302                   sta abst,x
c4f7 : 08                       php         ;flags after load/store sequence
c4f8 : 49c3                     eor #$c3
c4fa : dd1702                   cmp abs1,x   ;test result
                                trap_ne
                        
c502 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c505 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
c50d : ca                       dex
c50e : 10da                     bpl tldax1
                        
c510 : a203                     ldx #3
c512 :                  tldax2
                                set_stat 0
                        
c516 : bd1702                   lda abs1,x
c519 : 08                       php         ;test stores do not alter flags
c51a : 49c3                     eor #$c3
c51c : 28                       plp
c51d : 950c                     sta zpt,x
c51f : 08                       php         ;flags after load/store sequence
c520 : 49c3                     eor #$c3
c522 : d513                     cmp zp1,x   ;test result
                                trap_ne
                        
c529 : 68                       pla         ;load status
                                eor_flag 0
                        
c52c : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
c534 : ca                       dex
c535 : 10db                     bpl tldax2
                        
c537 : a203                     ldx #3
c539 :                  tldax3
                                set_stat $ff
                        
c53d : bd1702                   lda abs1,x
c540 : 08                       php         ;test stores do not alter flags
c541 : 49c3                     eor #$c3
c543 : 28                       plp
c544 : 950c                     sta zpt,x
c546 : 08                       php         ;flags after load/store sequence
c547 : 49c3                     eor #$c3
c549 : d513                     cmp zp1,x   ;test result
                                trap_ne
                        
c550 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c553 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
c55b : ca                       dex
c55c : 10db                     bpl tldax3
                        
c55e : a203                     ldx #3      ;testing store result
c560 : a000                     ldy #0
c562 : b50c             tstax   lda zpt,x
c564 : 49c3                     eor #$c3
c566 : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
c56d : 940c                     sty zpt,x   ;clear
c56f : bd0302                   lda abst,x
c572 : 49c3                     eor #$c3
c574 : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
c57c : 8a                       txa
c57d : 9d0302                   sta abst,x  ;clear
c580 : ca                       dex
c581 : 10df                     bpl tstax
                                next_test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
c592 : a003                     ldy #3
c594 :                  tlday
                                set_stat 0
                        
c598 : b124                     lda (ind1),y
c59a : 08                       php         ;test stores do not alter flags
c59b : 49c3                     eor #$c3
c59d : 28                       plp
c59e : 990302                   sta abst,y
c5a1 : 08                       php         ;flags after load/store sequence
c5a2 : 49c3                     eor #$c3
c5a4 : d91702                   cmp abs1,y  ;test result
                                trap_ne
                        
c5ac : 68                       pla         ;load status
                                eor_flag 0
                        
c5af : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
c5b7 : 88                       dey
c5b8 : 10da                     bpl tlday
                        
c5ba : a003                     ldy #3
c5bc :                  tlday1
                                set_stat $ff
                        
c5c0 : b124                     lda (ind1),y
c5c2 : 08                       php         ;test stores do not alter flags
c5c3 : 49c3                     eor #$c3
c5c5 : 28                       plp
c5c6 : 990302                   sta abst,y
c5c9 : 08                       php         ;flags after load/store sequence
c5ca : 49c3                     eor #$c3
c5cc : d91702                   cmp abs1,y  ;test result
                                trap_ne
                        
c5d4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c5d7 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
c5df : 88                       dey
c5e0 : 10da                     bpl tlday1
                        
c5e2 : a003                     ldy #3      ;testing store result
c5e4 : a200                     ldx #0
c5e6 : b90302           tstay   lda abst,y
c5e9 : 49c3                     eor #$c3
c5eb : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
c5f3 : 8a                       txa
c5f4 : 990302                   sta abst,y  ;clear
c5f7 : 88                       dey
c5f8 : 10ec                     bpl tstay
                        
c5fa : a003                     ldy #3
c5fc :                  tlday2
                                set_stat 0
                        
c600 : b91702                   lda abs1,y
c603 : 08                       php         ;test stores do not alter flags
c604 : 49c3                     eor #$c3
c606 : 28                       plp
c607 : 9130                     sta (indt),y
c609 : 08                       php         ;flags after load/store sequence
c60a : 49c3                     eor #$c3
c60c : d124                     cmp (ind1),y    ;test result
                                trap_ne
                        
c613 : 68                       pla         ;load status
                                eor_flag 0
                        
c616 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
c61e : 88                       dey
c61f : 10db                     bpl tlday2
                        
c621 : a003                     ldy #3
c623 :                  tlday3
                                set_stat $ff
                        
c627 : b91702                   lda abs1,y
c62a : 08                       php         ;test stores do not alter flags
c62b : 49c3                     eor #$c3
c62d : 28                       plp
c62e : 9130                     sta (indt),y
c630 : 08                       php         ;flags after load/store sequence
c631 : 49c3                     eor #$c3
c633 : d124                     cmp (ind1),y   ;test result
                                trap_ne
                        
c63a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c63d : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
c645 : 88                       dey
c646 : 10db                     bpl tlday3
                        
c648 : a003                     ldy #3      ;testing store result
c64a : a200                     ldx #0
c64c : b90302           tstay1  lda abst,y
c64f : 49c3                     eor #$c3
c651 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
c659 : 8a                       txa
c65a : 990302                   sta abst,y  ;clear
c65d : 88                       dey
c65e : 10ec                     bpl tstay1
                        
c660 : a206                     ldx #6
c662 : a003                     ldy #3
c664 :                  tldax4
                                set_stat 0
                        
c668 : a124                     lda (ind1,x)
c66a : 08                       php         ;test stores do not alter flags
c66b : 49c3                     eor #$c3
c66d : 28                       plp
c66e : 8130                     sta (indt,x)
c670 : 08                       php         ;flags after load/store sequence
c671 : 49c3                     eor #$c3
c673 : d91702                   cmp abs1,y  ;test result
                                trap_ne
                        
c67b : 68                       pla         ;load status
                                eor_flag 0
                        
c67e : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
c686 : ca                       dex
c687 : ca                       dex
c688 : 88                       dey
c689 : 10d9                     bpl tldax4
                        
c68b : a206                     ldx #6
c68d : a003                     ldy #3
c68f :                  tldax5
                                set_stat $ff
                        
c693 : a124                     lda (ind1,x)
c695 : 08                       php         ;test stores do not alter flags
c696 : 49c3                     eor #$c3
c698 : 28                       plp
c699 : 8130                     sta (indt,x)
c69b : 08                       php         ;flags after load/store sequence
c69c : 49c3                     eor #$c3
c69e : d91702                   cmp abs1,y  ;test result
                                trap_ne
                        
c6a6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c6a9 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
c6b1 : ca                       dex
c6b2 : ca                       dex
c6b3 : 88                       dey
c6b4 : 10d9                     bpl tldax5
                        
c6b6 : a003                     ldy #3      ;testing store result
c6b8 : a200                     ldx #0
c6ba : b90302           tstay2  lda abst,y
c6bd : 49c3                     eor #$c3
c6bf : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
c6c7 : 8a                       txa
c6c8 : 990302                   sta abst,y  ;clear
c6cb : 88                       dey
c6cc : 10ec                     bpl tstay2
                                next_test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
c6dd : a2fd                     ldx #3+$fa
c6df : b519             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
c6e1 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
c6e4 : ca                       dex
c6e5 : e0fa                     cpx #$fa
c6e7 : b0f6                     bcs tldax6
c6e9 : a2fd                     ldx #3+$fa
c6eb : bd1d01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
c6ee : 9512                     sta zpt-$fa&$ff,x
c6f0 : ca                       dex
c6f1 : e0fa                     cpx #$fa
c6f3 : b0f6                     bcs tldax7
                        
c6f5 : a203                     ldx #3      ;testing wraparound result
c6f7 : a000                     ldy #0
c6f9 : b50c             tstax1  lda zpt,x
c6fb : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
c702 : 940c                     sty zpt,x   ;clear
c704 : bd0302                   lda abst,x
c707 : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
c70f : 8a                       txa
c710 : 9d0302                   sta abst,x  ;clear
c713 : ca                       dex
c714 : 10e3                     bpl tstax1
                        
c716 : a0fb                     ldy #3+$f8
c718 : a2fe                     ldx #6+$f8
c71a : a12c             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
c71c : 990b01                   sta abst-$f8,y
c71f : ca                       dex
c720 : ca                       dex
c721 : 88                       dey
c722 : c0f8                     cpy #$f8
c724 : b0f4                     bcs tlday4
c726 : a003                     ldy #3      ;testing wraparound result
c728 : a200                     ldx #0
c72a : b90302           tstay4  lda abst,y
c72d : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
c735 : 8a                       txa
c736 : 990302                   sta abst,y  ;clear
c739 : 88                       dey
c73a : 10ee                     bpl tstay4
                        
c73c : a0fb                     ldy #3+$f8
c73e : b91f01           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
c741 : 9138                     sta (inwt),y
c743 : 88                       dey
c744 : c0f8                     cpy #$f8
c746 : b0f6                     bcs tlday5
c748 : a003                     ldy #3      ;testing wraparound result
c74a : a200                     ldx #0
c74c : b90302           tstay5  lda abst,y
c74f : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
c757 : 8a                       txa
c758 : 990302                   sta abst,y  ;clear
c75b : 88                       dey
c75c : 10ee                     bpl tstay5
                        
c75e : a0fb                     ldy #3+$f8
c760 : a2fe                     ldx #6+$f8
c762 : b12e             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed
c764 : 8138                     sta (indt-$f8&$ff,x)
c766 : ca                       dex
c767 : ca                       dex
c768 : 88                       dey
c769 : c0f8                     cpy #$f8
c76b : b0f5                     bcs tlday6
c76d : a003                     ldy #3      ;testing wraparound result
c76f : a200                     ldx #0
c771 : b90302           tstay6  lda abst,y
c774 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
c77c : 8a                       txa
c77d : 990302                   sta abst,y  ;clear
c780 : 88                       dey
c781 : 10ee                     bpl tstay6
                                next_test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0
                        
c796 : a513                     lda zp1
c798 : 08                       php         ;test stores do not alter flags
c799 : 49c3                     eor #$c3
c79b : 28                       plp
c79c : 8d0302                   sta abst
c79f : 08                       php         ;flags after load/store sequence
c7a0 : 49c3                     eor #$c3
c7a2 : c9c3                     cmp #$c3    ;test result
                                trap_ne
                        
c7a9 : 68                       pla         ;load status
                                eor_flag 0
                        
c7ac : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c7b8 : a514                     lda zp1+1
c7ba : 08                       php         ;test stores do not alter flags
c7bb : 49c3                     eor #$c3
c7bd : 28                       plp
c7be : 8d0402                   sta abst+1
c7c1 : 08                       php         ;flags after load/store sequence
c7c2 : 49c3                     eor #$c3
c7c4 : c982                     cmp #$82    ;test result
                                trap_ne
                        
c7cb : 68                       pla         ;load status
                                eor_flag 0
                        
c7ce : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c7da : a515                     lda zp1+2
c7dc : 08                       php         ;test stores do not alter flags
c7dd : 49c3                     eor #$c3
c7df : 28                       plp
c7e0 : 8d0502                   sta abst+2
c7e3 : 08                       php         ;flags after load/store sequence
c7e4 : 49c3                     eor #$c3
c7e6 : c941                     cmp #$41    ;test result
                                trap_ne
                        
c7ed : 68                       pla         ;load status
                                eor_flag 0
                        
c7f0 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c7fc : a516                     lda zp1+3
c7fe : 08                       php         ;test stores do not alter flags
c7ff : 49c3                     eor #$c3
c801 : 28                       plp
c802 : 8d0602                   sta abst+3
c805 : 08                       php         ;flags after load/store sequence
c806 : 49c3                     eor #$c3
c808 : c900                     cmp #0      ;test result
                                trap_ne
                        
c80f : 68                       pla         ;load status
                                eor_flag 0
                        
c812 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c81e : a513                     lda zp1
c820 : 08                       php         ;test stores do not alter flags
c821 : 49c3                     eor #$c3
c823 : 28                       plp
c824 : 8d0302                   sta abst
c827 : 08                       php         ;flags after load/store sequence
c828 : 49c3                     eor #$c3
c82a : c9c3                     cmp #$c3    ;test result
                                trap_ne
                        
c831 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c834 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c840 : a514                     lda zp1+1
c842 : 08                       php         ;test stores do not alter flags
c843 : 49c3                     eor #$c3
c845 : 28                       plp
c846 : 8d0402                   sta abst+1
c849 : 08                       php         ;flags after load/store sequence
c84a : 49c3                     eor #$c3
c84c : c982                     cmp #$82    ;test result
                                trap_ne
                        
c853 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c856 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c862 : a515                     lda zp1+2
c864 : 08                       php         ;test stores do not alter flags
c865 : 49c3                     eor #$c3
c867 : 28                       plp
c868 : 8d0502                   sta abst+2
c86b : 08                       php         ;flags after load/store sequence
c86c : 49c3                     eor #$c3
c86e : c941                     cmp #$41    ;test result
                                trap_ne
                        
c875 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c878 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c884 : a516                     lda zp1+3
c886 : 08                       php         ;test stores do not alter flags
c887 : 49c3                     eor #$c3
c889 : 28                       plp
c88a : 8d0602                   sta abst+3
c88d : 08                       php         ;flags after load/store sequence
c88e : 49c3                     eor #$c3
c890 : c900                     cmp #0      ;test result
                                trap_ne
                        
c897 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c89a : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c8a6 : ad1702                   lda abs1
c8a9 : 08                       php         ;test stores do not alter flags
c8aa : 49c3                     eor #$c3
c8ac : 28                       plp
c8ad : 850c                     sta zpt
c8af : 08                       php         ;flags after load/store sequence
c8b0 : 49c3                     eor #$c3
c8b2 : c513                     cmp zp1     ;test result
                                trap_ne
                        
c8b9 : 68                       pla         ;load status
                                eor_flag 0
                        
c8bc : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c8c8 : ad1802                   lda abs1+1
c8cb : 08                       php         ;test stores do not alter flags
c8cc : 49c3                     eor #$c3
c8ce : 28                       plp
c8cf : 850d                     sta zpt+1
c8d1 : 08                       php         ;flags after load/store sequence
c8d2 : 49c3                     eor #$c3
c8d4 : c514                     cmp zp1+1   ;test result
                                trap_ne
                        
c8db : 68                       pla         ;load status
                                eor_flag 0
                        
c8de : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c8ea : ad1902                   lda abs1+2
c8ed : 08                       php         ;test stores do not alter flags
c8ee : 49c3                     eor #$c3
c8f0 : 28                       plp
c8f1 : 850e                     sta zpt+2
c8f3 : 08                       php         ;flags after load/store sequence
c8f4 : 49c3                     eor #$c3
c8f6 : c515                     cmp zp1+2   ;test result
                                trap_ne
                        
c8fd : 68                       pla         ;load status
                                eor_flag 0
                        
c900 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c90c : ad1a02                   lda abs1+3
c90f : 08                       php         ;test stores do not alter flags
c910 : 49c3                     eor #$c3
c912 : 28                       plp
c913 : 850f                     sta zpt+3
c915 : 08                       php         ;flags after load/store sequence
c916 : 49c3                     eor #$c3
c918 : c516                     cmp zp1+3   ;test result
                                trap_ne
                        
c91f : 68                       pla         ;load status
                                eor_flag 0
                        
c922 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c92e : ad1702                   lda abs1
c931 : 08                       php         ;test stores do not alter flags
c932 : 49c3                     eor #$c3
c934 : 28                       plp
c935 : 850c                     sta zpt
c937 : 08                       php         ;flags after load/store sequence
c938 : 49c3                     eor #$c3
c93a : c513                     cmp zp1     ;test result
                                trap_ne
                        
c941 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c944 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c950 : ad1802                   lda abs1+1
c953 : 08                       php         ;test stores do not alter flags
c954 : 49c3                     eor #$c3
c956 : 28                       plp
c957 : 850d                     sta zpt+1
c959 : 08                       php         ;flags after load/store sequence
c95a : 49c3                     eor #$c3
c95c : c514                     cmp zp1+1   ;test result
                                trap_ne
                        
c963 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c966 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c972 : ad1902                   lda abs1+2
c975 : 08                       php         ;test stores do not alter flags
c976 : 49c3                     eor #$c3
c978 : 28                       plp
c979 : 850e                     sta zpt+2
c97b : 08                       php         ;flags after load/store sequence
c97c : 49c3                     eor #$c3
c97e : c515                     cmp zp1+2   ;test result
                                trap_ne
                        
c985 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c988 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
c994 : ad1a02                   lda abs1+3
c997 : 08                       php         ;test stores do not alter flags
c998 : 49c3                     eor #$c3
c99a : 28                       plp
c99b : 850f                     sta zpt+3
c99d : 08                       php         ;flags after load/store sequence
c99e : 49c3                     eor #$c3
c9a0 : c516                     cmp zp1+3   ;test result
                                trap_ne
                        
c9a7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
c9aa : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c9b6 : a9c3                     lda #$c3
c9b8 : 08                       php
c9b9 : cd1702                   cmp abs1    ;test result
                                trap_ne
                        
c9c1 : 68                       pla         ;load status
                                eor_flag 0
                        
c9c4 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c9d0 : a982                     lda #$82
c9d2 : 08                       php
c9d3 : cd1802                   cmp abs1+1  ;test result
                                trap_ne
                        
c9db : 68                       pla         ;load status
                                eor_flag 0
                        
c9de : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
c9ea : a941                     lda #$41
c9ec : 08                       php
c9ed : cd1902                   cmp abs1+2  ;test result
                                trap_ne
                        
c9f5 : 68                       pla         ;load status
                                eor_flag 0
                        
c9f8 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
ca04 : a900                     lda #0
ca06 : 08                       php
ca07 : cd1a02                   cmp abs1+3  ;test result
                                trap_ne
                        
ca0f : 68                       pla         ;load status
                                eor_flag 0
                        
ca12 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
ca1e : a9c3                     lda #$c3
ca20 : 08                       php
ca21 : cd1702                   cmp abs1    ;test result
                                trap_ne
                        
ca29 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
ca2c : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
ca38 : a982                     lda #$82
ca3a : 08                       php
ca3b : cd1802                   cmp abs1+1  ;test result
                                trap_ne
                        
ca43 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
ca46 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
ca52 : a941                     lda #$41
ca54 : 08                       php
ca55 : cd1902                   cmp abs1+2  ;test result
                                trap_ne
                        
ca5d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
ca60 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
ca6c : a900                     lda #0
ca6e : 08                       php
ca6f : cd1a02                   cmp abs1+3  ;test result
                                trap_ne
                        
ca77 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
ca7a : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
ca82 : a200                     ldx #0
ca84 : a50c                     lda zpt
ca86 : 49c3                     eor #$c3
ca88 : c513                     cmp zp1
                                trap_ne     ;store to zp data
                        
ca8f : 860c                     stx zpt     ;clear
ca91 : ad0302                   lda abst
ca94 : 49c3                     eor #$c3
ca96 : cd1702                   cmp abs1
                                trap_ne     ;store to abs data
                        
ca9e : 8e0302                   stx abst    ;clear
caa1 : a50d                     lda zpt+1
caa3 : 49c3                     eor #$c3
caa5 : c514                     cmp zp1+1
                                trap_ne     ;store to zp data
                        
caac : 860d                     stx zpt+1   ;clear
caae : ad0402                   lda abst+1
cab1 : 49c3                     eor #$c3
cab3 : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs data
                        
cabb : 8e0402                   stx abst+1  ;clear
cabe : a50e                     lda zpt+2
cac0 : 49c3                     eor #$c3
cac2 : c515                     cmp zp1+2
                                trap_ne     ;store to zp data
                        
cac9 : 860e                     stx zpt+2   ;clear
cacb : ad0502                   lda abst+2
cace : 49c3                     eor #$c3
cad0 : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs data
                        
cad8 : 8e0502                   stx abst+2  ;clear
cadb : a50f                     lda zpt+3
cadd : 49c3                     eor #$c3
cadf : c516                     cmp zp1+3
                                trap_ne     ;store to zp data
                        
cae6 : 860f                     stx zpt+3   ;clear
cae8 : ad0602                   lda abst+3
caeb : 49c3                     eor #$c3
caed : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs data
                        
caf5 : 8e0602                   stx abst+3  ;clear
                                next_test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                        
cb0d : 2416                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz
                        
                                set_a 1,0
                        
cb27 : 2415                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
                        
                                set_a 1,0
                        
cb41 : 2414                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
                        
                                set_a 1,0
                        
cb5b : 2413                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
                        
                        
                                set_a $ff,$ff
                        
cb75 : 2416                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
                        
                                set_a 1,$ff
                        
cb8f : 2415                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
                        
                                set_a 1,$ff
                        
cba9 : 2414                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
                        
                                set_a 1,$ff
                        
cbc3 : 2413                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
                        
                        
                                set_a $ff,0
                        
cbdd : 2c1a02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz
                        
                                set_a 1,0
                        
cbf8 : 2c1902                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
                        
                                set_a 1,0
                        
cc13 : 2c1802                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
                        
                                set_a 1,0
                        
cc2e : 2c1702                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
                        
                        
                                set_a $ff,$ff
                        
cc49 : 2c1a02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
                        
                                set_a 1,$ff
                        
cc64 : 2c1902                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
                        
                                set_a 1,$ff
                        
cc7f : 2c1802                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
                        
                                set_a 1,$ff
                        
cc9a : 2c1702                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
                        
                                next_test
                        
                        
                        ; CPX - zp / abs / #
                                set_x $80,0
                        
ccc4 : e417                     cpx zp7f
                                tst_stat fc
                        
ccd1 : ca                       dex
ccd2 : e417                     cpx zp7f
                                tst_stat fzc
                        
ccdf : ca                       dex
cce0 : e417                     cpx zp7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
ccfa : e417                     cpx zp7f
                                tst_stat ~fnz
                        
cd07 : ca                       dex
cd08 : e417                     cpx zp7f
                                tst_stat ~fn
                        
cd15 : ca                       dex
cd16 : e417                     cpx zp7f
                                tst_x $7e,~fzc
                        
                        
                                set_x $80,0
                        
cd30 : ec1b02                   cpx abs7f
                                tst_stat fc
                        
cd3e : ca                       dex
cd3f : ec1b02                   cpx abs7f
                                tst_stat fzc
                        
cd4d : ca                       dex
cd4e : ec1b02                   cpx abs7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
cd69 : ec1b02                   cpx abs7f
                                tst_stat ~fnz
                        
cd77 : ca                       dex
cd78 : ec1b02                   cpx abs7f
                                tst_stat ~fn
                        
cd86 : ca                       dex
cd87 : ec1b02                   cpx abs7f
                                tst_x $7e,~fzc
                        
                        
                                set_x $80,0
                        
cda2 : e07f                     cpx #$7f
                                tst_stat fc
                        
cdaf : ca                       dex
cdb0 : e07f                     cpx #$7f
                                tst_stat fzc
                        
cdbd : ca                       dex
cdbe : e07f                     cpx #$7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
cdd8 : e07f                     cpx #$7f
                                tst_stat ~fnz
                        
cde5 : ca                       dex
cde6 : e07f                     cpx #$7f
                                tst_stat ~fn
                        
cdf3 : ca                       dex
cdf4 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
                        
                                next_test
                        
                        
                        ; CPY - zp / abs / #
                                set_y $80,0
                        
ce1d : c417                     cpy zp7f
                                tst_stat fc
                        
ce2a : 88                       dey
ce2b : c417                     cpy zp7f
                                tst_stat fzc
                        
ce38 : 88                       dey
ce39 : c417                     cpy zp7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
ce53 : c417                     cpy zp7f
                                tst_stat ~fnz
                        
ce60 : 88                       dey
ce61 : c417                     cpy zp7f
                                tst_stat ~fn
                        
ce6e : 88                       dey
ce6f : c417                     cpy zp7f
                                tst_y $7e,~fzc
                        
                        
                                set_y $80,0
                        
ce89 : cc1b02                   cpy abs7f
                                tst_stat fc
                        
ce97 : 88                       dey
ce98 : cc1b02                   cpy abs7f
                                tst_stat fzc
                        
cea6 : 88                       dey
cea7 : cc1b02                   cpy abs7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
cec2 : cc1b02                   cpy abs7f
                                tst_stat ~fnz
                        
ced0 : 88                       dey
ced1 : cc1b02                   cpy abs7f
                                tst_stat ~fn
                        
cedf : 88                       dey
cee0 : cc1b02                   cpy abs7f
                                tst_y $7e,~fzc
                        
                        
                                set_y $80,0
                        
cefb : c07f                     cpy #$7f
                                tst_stat fc
                        
cf08 : 88                       dey
cf09 : c07f                     cpy #$7f
                                tst_stat fzc
                        
cf16 : 88                       dey
cf17 : c07f                     cpy #$7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
cf31 : c07f                     cpy #$7f
                                tst_stat ~fnz
                        
cf3e : 88                       dey
cf3f : c07f                     cpy #$7f
                                tst_stat ~fn
                        
cf4c : 88                       dey
cf4d : c07f                     cpy #$7f
                                tst_y $7e,~fzc
                        
                                next_test
                        
                        
                        ; CMP - zp / abs / #
                                set_a $80,0
                        
cf76 : c517                     cmp zp7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
cf90 : c517                     cmp zp7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
cfaa : c517                     cmp zp7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
cfc4 : c517                     cmp zp7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
cfde : c517                     cmp zp7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
cff8 : c517                     cmp zp7f
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
d012 : cd1b02                   cmp abs7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
d02d : cd1b02                   cmp abs7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
d048 : cd1b02                   cmp abs7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
d063 : cd1b02                   cmp abs7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
d07e : cd1b02                   cmp abs7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
d099 : cd1b02                   cmp abs7f
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
d0b4 : c97f                     cmp #$7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
d0ce : c97f                     cmp #$7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
d0e8 : c97f                     cmp #$7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
d102 : c97f                     cmp #$7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
d11c : c97f                     cmp #$7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
d136 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
                        
                        
d14a : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                        
d152 : d513                     cmp zp1,x
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
d16c : d513                     cmp zp1,x
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
d186 : d513                     cmp zp1,x
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
d1a0 : d513                     cmp zp1,x
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
d1ba : d513                     cmp zp1,x
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
d1d4 : d513                     cmp zp1,x
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
d1ee : dd1702                   cmp abs1,x
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
d209 : dd1702                   cmp abs1,x
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
d224 : dd1702                   cmp abs1,x
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
d23f : dd1702                   cmp abs1,x
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
d25a : dd1702                   cmp abs1,x
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
d275 : dd1702                   cmp abs1,x
                                tst_a $7e,~fzc
                        
                        
d28a : a004                     ldy #4          ;with indexing by Y
d28c : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                        
d294 : d91702                   cmp abs1,y
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
d2af : d91702                   cmp abs1,y
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
d2ca : d91702                   cmp abs1,y
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
d2e5 : d91702                   cmp abs1,y
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
d300 : d91702                   cmp abs1,y
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
d31b : d91702                   cmp abs1,y
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
d336 : c124                     cmp (ind1,x)
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
d350 : c124                     cmp (ind1,x)
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
d36a : c124                     cmp (ind1,x)
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
d384 : c124                     cmp (ind1,x)
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
d39e : c124                     cmp (ind1,x)
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
d3b8 : c124                     cmp (ind1,x)
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
d3d2 : d124                     cmp (ind1),y
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
d3ec : d124                     cmp (ind1),y
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
d406 : d124                     cmp (ind1),y
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
d420 : d124                     cmp (ind1),y
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
d43a : d124                     cmp (ind1),y
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
d454 : d124                     cmp (ind1),y
                                tst_a $7e,~fzc
                        
                                next_test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
d477 : a203                     ldx #3
d479 :                  tasl
                                set_ax zp1,0
                        
d47f : 0a                       asl a
                                tst_ax rASL,fASL,0
                        
d494 : ca                       dex
d495 : 10e2                     bpl tasl
d497 : a203                     ldx #3
d499 :                  tasl1
                                set_ax zp1,$ff
                        
d49f : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
                        
d4b4 : ca                       dex
d4b5 : 10e2                     bpl tasl1
                        
d4b7 : a203                     ldx #3
d4b9 :                  tlsr
                                set_ax zp1,0
                        
d4bf : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
                        
d4d4 : ca                       dex
d4d5 : 10e2                     bpl tlsr
d4d7 : a203                     ldx #3
d4d9 :                  tlsr1
                                set_ax zp1,$ff
                        
d4df : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
                        
d4f4 : ca                       dex
d4f5 : 10e2                     bpl tlsr1
                        
d4f7 : a203                     ldx #3
d4f9 :                  trol
                                set_ax zp1,0
                        
d4ff : 2a                       rol a
                                tst_ax rROL,fROL,0
                        
d514 : ca                       dex
d515 : 10e2                     bpl trol
d517 : a203                     ldx #3
d519 :                  trol1
                                set_ax zp1,$ff-fc
                        
d51f : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
                        
d534 : ca                       dex
d535 : 10e2                     bpl trol1
                        
d537 : a203                     ldx #3
d539 :                  trolc
                                set_ax zp1,fc
                        
d53f : 2a                       rol a
                                tst_ax rROLc,fROLc,0
                        
d554 : ca                       dex
d555 : 10e2                     bpl trolc
d557 : a203                     ldx #3
d559 :                  trolc1
                                set_ax zp1,$ff
                        
d55f : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
                        
d574 : ca                       dex
d575 : 10e2                     bpl trolc1
                        
d577 : a203                     ldx #3
d579 :                  tror
                                set_ax zp1,0
                        
d57f : 6a                       ror a
                                tst_ax rROR,fROR,0
                        
d594 : ca                       dex
d595 : 10e2                     bpl tror
d597 : a203                     ldx #3
d599 :                  tror1
                                set_ax zp1,$ff-fc
                        
d59f : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
                        
d5b4 : ca                       dex
d5b5 : 10e2                     bpl tror1
                        
d5b7 : a203                     ldx #3
d5b9 :                  trorc
                                set_ax zp1,fc
                        
d5bf : 6a                       ror a
                                tst_ax rRORc,fRORc,0
                        
d5d4 : ca                       dex
d5d5 : 10e2                     bpl trorc
d5d7 : a203                     ldx #3
d5d9 :                  trorc1
                                set_ax zp1,$ff
                        
d5df : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
                        
d5f4 : ca                       dex
d5f5 : 10e2                     bpl trorc1
                                next_test
                        
                        
                        ; shifts - zeropage
d606 : a203                     ldx #3
d608 :                  tasl2
                                set_z zp1,0
                        
d610 : 060c                     asl zpt
                                tst_z rASL,fASL,0
                        
d628 : ca                       dex
d629 : 10dd                     bpl tasl2
d62b : a203                     ldx #3
d62d :                  tasl3
                                set_z zp1,$ff
                        
d635 : 060c                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
                        
d64d : ca                       dex
d64e : 10dd                     bpl tasl3
                        
d650 : a203                     ldx #3
d652 :                  tlsr2
                                set_z zp1,0
                        
d65a : 460c                     lsr zpt
                                tst_z rLSR,fLSR,0
                        
d672 : ca                       dex
d673 : 10dd                     bpl tlsr2
d675 : a203                     ldx #3
d677 :                  tlsr3
                                set_z zp1,$ff
                        
d67f : 460c                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
                        
d697 : ca                       dex
d698 : 10dd                     bpl tlsr3
                        
d69a : a203                     ldx #3
d69c :                  trol2
                                set_z zp1,0
                        
d6a4 : 260c                     rol zpt
                                tst_z rROL,fROL,0
                        
d6bc : ca                       dex
d6bd : 10dd                     bpl trol2
d6bf : a203                     ldx #3
d6c1 :                  trol3
                                set_z zp1,$ff-fc
                        
d6c9 : 260c                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
                        
d6e1 : ca                       dex
d6e2 : 10dd                     bpl trol3
                        
d6e4 : a203                     ldx #3
d6e6 :                  trolc2
                                set_z zp1,fc
                        
d6ee : 260c                     rol zpt
                                tst_z rROLc,fROLc,0
                        
d706 : ca                       dex
d707 : 10dd                     bpl trolc2
d709 : a203                     ldx #3
d70b :                  trolc3
                                set_z zp1,$ff
                        
d713 : 260c                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
                        
d72b : ca                       dex
d72c : 10dd                     bpl trolc3
                        
d72e : a203                     ldx #3
d730 :                  tror2
                                set_z zp1,0
                        
d738 : 660c                     ror zpt
                                tst_z rROR,fROR,0
                        
d750 : ca                       dex
d751 : 10dd                     bpl tror2
d753 : a203                     ldx #3
d755 :                  tror3
                                set_z zp1,$ff-fc
                        
d75d : 660c                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
                        
d775 : ca                       dex
d776 : 10dd                     bpl tror3
                        
d778 : a203                     ldx #3
d77a :                  trorc2
                                set_z zp1,fc
                        
d782 : 660c                     ror zpt
                                tst_z rRORc,fRORc,0
                        
d79a : ca                       dex
d79b : 10dd                     bpl trorc2
d79d : a203                     ldx #3
d79f :                  trorc3
                                set_z zp1,$ff
                        
d7a7 : 660c                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
                        
d7bf : ca                       dex
d7c0 : 10dd                     bpl trorc3
                                next_test
                        
                        
                        ; shifts - absolute
d7d1 : a203                     ldx #3
d7d3 :                  tasl4
                                set_abs zp1,0
                        
d7dc : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
                        
d7f6 : ca                       dex
d7f7 : 10da                     bpl tasl4
d7f9 : a203                     ldx #3
d7fb :                  tasl5
                                set_abs zp1,$ff
                        
d804 : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
                        
d81e : ca                       dex
d81f : 10da                     bpl tasl5
                        
d821 : a203                     ldx #3
d823 :                  tlsr4
                                set_abs zp1,0
                        
d82c : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
                        
d846 : ca                       dex
d847 : 10da                     bpl tlsr4
d849 : a203                     ldx #3
d84b :                  tlsr5
                                set_abs zp1,$ff
                        
d854 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
                        
d86e : ca                       dex
d86f : 10da                     bpl tlsr5
                        
d871 : a203                     ldx #3
d873 :                  trol4
                                set_abs zp1,0
                        
d87c : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
                        
d896 : ca                       dex
d897 : 10da                     bpl trol4
d899 : a203                     ldx #3
d89b :                  trol5
                                set_abs zp1,$ff-fc
                        
d8a4 : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
                        
d8be : ca                       dex
d8bf : 10da                     bpl trol5
                        
d8c1 : a203                     ldx #3
d8c3 :                  trolc4
                                set_abs zp1,fc
                        
d8cc : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
                        
d8e6 : ca                       dex
d8e7 : 10da                     bpl trolc4
d8e9 : a203                     ldx #3
d8eb :                  trolc5
                                set_abs zp1,$ff
                        
d8f4 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
                        
d90e : ca                       dex
d90f : 10da                     bpl trolc5
                        
d911 : a203                     ldx #3
d913 :                  tror4
                                set_abs zp1,0
                        
d91c : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
                        
d936 : ca                       dex
d937 : 10da                     bpl tror4
d939 : a203                     ldx #3
d93b :                  tror5
                                set_abs zp1,$ff-fc
                        
d944 : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
                        
d95e : ca                       dex
d95f : 10da                     bpl tror5
                        
d961 : a203                     ldx #3
d963 :                  trorc4
                                set_abs zp1,fc
                        
d96c : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
                        
d986 : ca                       dex
d987 : 10da                     bpl trorc4
d989 : a203                     ldx #3
d98b :                  trorc5
                                set_abs zp1,$ff
                        
d994 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
                        
d9ae : ca                       dex
d9af : 10da                     bpl trorc5
                                next_test
                        
                        
                        ; shifts - zp indexed
d9c0 : a203                     ldx #3
d9c2 :                  tasl6
                                set_zx zp1,0
                        
d9ca : 160c                     asl zpt,x
                                tst_zx rASL,fASL,0
                        
d9e2 : ca                       dex
d9e3 : 10dd                     bpl tasl6
d9e5 : a203                     ldx #3
d9e7 :                  tasl7
                                set_zx zp1,$ff
                        
d9ef : 160c                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
                        
da07 : ca                       dex
da08 : 10dd                     bpl tasl7
                        
da0a : a203                     ldx #3
da0c :                  tlsr6
                                set_zx zp1,0
                        
da14 : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
                        
da2c : ca                       dex
da2d : 10dd                     bpl tlsr6
da2f : a203                     ldx #3
da31 :                  tlsr7
                                set_zx zp1,$ff
                        
da39 : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
                        
da51 : ca                       dex
da52 : 10dd                     bpl tlsr7
                        
da54 : a203                     ldx #3
da56 :                  trol6
                                set_zx zp1,0
                        
da5e : 360c                     rol zpt,x
                                tst_zx rROL,fROL,0
                        
da76 : ca                       dex
da77 : 10dd                     bpl trol6
da79 : a203                     ldx #3
da7b :                  trol7
                                set_zx zp1,$ff-fc
                        
da83 : 360c                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
                        
da9b : ca                       dex
da9c : 10dd                     bpl trol7
                        
da9e : a203                     ldx #3
daa0 :                  trolc6
                                set_zx zp1,fc
                        
daa8 : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,0
                        
dac0 : ca                       dex
dac1 : 10dd                     bpl trolc6
dac3 : a203                     ldx #3
dac5 :                  trolc7
                                set_zx zp1,$ff
                        
dacd : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
                        
dae5 : ca                       dex
dae6 : 10dd                     bpl trolc7
                        
dae8 : a203                     ldx #3
daea :                  tror6
                                set_zx zp1,0
                        
daf2 : 760c                     ror zpt,x
                                tst_zx rROR,fROR,0
                        
db0a : ca                       dex
db0b : 10dd                     bpl tror6
db0d : a203                     ldx #3
db0f :                  tror7
                                set_zx zp1,$ff-fc
                        
db17 : 760c                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
                        
db2f : ca                       dex
db30 : 10dd                     bpl tror7
                        
db32 : a203                     ldx #3
db34 :                  trorc6
                                set_zx zp1,fc
                        
db3c : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,0
                        
db54 : ca                       dex
db55 : 10dd                     bpl trorc6
db57 : a203                     ldx #3
db59 :                  trorc7
                                set_zx zp1,$ff
                        
db61 : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
                        
db79 : ca                       dex
db7a : 10dd                     bpl trorc7
                                next_test
                        
                        
                        ; shifts - abs indexed
db8b : a203                     ldx #3
db8d :                  tasl8
                                set_absx zp1,0
                        
db96 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
                        
dbb0 : ca                       dex
dbb1 : 10da                     bpl tasl8
dbb3 : a203                     ldx #3
dbb5 :                  tasl9
                                set_absx zp1,$ff
                        
dbbe : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
                        
dbd8 : ca                       dex
dbd9 : 10da                     bpl tasl9
                        
dbdb : a203                     ldx #3
dbdd :                  tlsr8
                                set_absx zp1,0
                        
dbe6 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
                        
dc00 : ca                       dex
dc01 : 10da                     bpl tlsr8
dc03 : a203                     ldx #3
dc05 :                  tlsr9
                                set_absx zp1,$ff
                        
dc0e : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
                        
dc28 : ca                       dex
dc29 : 10da                     bpl tlsr9
                        
dc2b : a203                     ldx #3
dc2d :                  trol8
                                set_absx zp1,0
                        
dc36 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
                        
dc50 : ca                       dex
dc51 : 10da                     bpl trol8
dc53 : a203                     ldx #3
dc55 :                  trol9
                                set_absx zp1,$ff-fc
                        
dc5e : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
                        
dc78 : ca                       dex
dc79 : 10da                     bpl trol9
                        
dc7b : a203                     ldx #3
dc7d :                  trolc8
                                set_absx zp1,fc
                        
dc86 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
                        
dca0 : ca                       dex
dca1 : 10da                     bpl trolc8
dca3 : a203                     ldx #3
dca5 :                  trolc9
                                set_absx zp1,$ff
                        
dcae : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
                        
dcc8 : ca                       dex
dcc9 : 10da                     bpl trolc9
                        
dccb : a203                     ldx #3
dccd :                  tror8
                                set_absx zp1,0
                        
dcd6 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
                        
dcf0 : ca                       dex
dcf1 : 10da                     bpl tror8
dcf3 : a203                     ldx #3
dcf5 :                  tror9
                                set_absx zp1,$ff-fc
                        
dcfe : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
                        
dd18 : ca                       dex
dd19 : 10da                     bpl tror9
                        
dd1b : a203                     ldx #3
dd1d :                  trorc8
                                set_absx zp1,fc
                        
dd26 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
                        
dd40 : ca                       dex
dd41 : 10da                     bpl trorc8
dd43 : a203                     ldx #3
dd45 :                  trorc9
                                set_absx zp1,$ff
                        
dd4e : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
                        
dd68 : ca                       dex
dd69 : 10da                     bpl trorc9
                                next_test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
dd7a : a200                     ldx #0
dd7c : a97e                     lda #$7e
dd7e : 850c                     sta zpt
dd80 :                  tinc
                                set_stat 0
                        
dd84 : e60c                     inc zpt
                                tst_z rINC,fINC,0
                        
dd9c : e8                       inx
dd9d : e002                     cpx #2
dd9f : d004                     bne tinc1
dda1 : a9fe                     lda #$fe
dda3 : 850c                     sta zpt
dda5 : e005             tinc1   cpx #5
dda7 : d0d7                     bne tinc
dda9 : ca                       dex
ddaa : e60c                     inc zpt
ddac :                  tdec
                                set_stat 0
                        
ddb0 : c60c                     dec zpt
                                tst_z rINC,fINC,0
                        
ddc8 : ca                       dex
ddc9 : 300a                     bmi tdec1
ddcb : e001                     cpx #1
ddcd : d0dd                     bne tdec
ddcf : a981                     lda #$81
ddd1 : 850c                     sta zpt
ddd3 : d0d7                     bne tdec
ddd5 :                  tdec1
ddd5 : a200                     ldx #0
ddd7 : a97e                     lda #$7e
ddd9 : 850c                     sta zpt
dddb :                  tinc10
                                set_stat $ff
                        
dddf : e60c                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
                        
ddf7 : e8                       inx
ddf8 : e002                     cpx #2
ddfa : d004                     bne tinc11
ddfc : a9fe                     lda #$fe
ddfe : 850c                     sta zpt
de00 : e005             tinc11  cpx #5
de02 : d0d7                     bne tinc10
de04 : ca                       dex
de05 : e60c                     inc zpt
de07 :                  tdec10
                                set_stat $ff
                        
de0b : c60c                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
                        
de23 : ca                       dex
de24 : 300a                     bmi tdec11
de26 : e001                     cpx #1
de28 : d0dd                     bne tdec10
de2a : a981                     lda #$81
de2c : 850c                     sta zpt
de2e : d0d7                     bne tdec10
de30 :                  tdec11
                                next_test
                        
                        
                        ; absolute memory
de3f : a200                     ldx #0
de41 : a97e                     lda #$7e
de43 : 8d0302                   sta abst
de46 :                  tinc2
                                set_stat 0
                        
de4a : ee0302                   inc abst
                                tst_abs rINC,fINC,0
                        
de64 : e8                       inx
de65 : e002                     cpx #2
de67 : d005                     bne tinc3
de69 : a9fe                     lda #$fe
de6b : 8d0302                   sta abst
de6e : e005             tinc3   cpx #5
de70 : d0d4                     bne tinc2
de72 : ca                       dex
de73 : ee0302                   inc abst
de76 :                  tdec2
                                set_stat 0
                        
de7a : ce0302                   dec abst
                                tst_abs rINC,fINC,0
                        
de94 : ca                       dex
de95 : 300b                     bmi tdec3
de97 : e001                     cpx #1
de99 : d0db                     bne tdec2
de9b : a981                     lda #$81
de9d : 8d0302                   sta abst
dea0 : d0d4                     bne tdec2
dea2 :                  tdec3
dea2 : a200                     ldx #0
dea4 : a97e                     lda #$7e
dea6 : 8d0302                   sta abst
dea9 :                  tinc12
                                set_stat $ff
                        
dead : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
                        
dec7 : e8                       inx
dec8 : e002                     cpx #2
deca : d005                     bne tinc13
decc : a9fe                     lda #$fe
dece : 8d0302                   sta abst
ded1 : e005             tinc13   cpx #5
ded3 : d0d4                     bne tinc12
ded5 : ca                       dex
ded6 : ee0302                   inc abst
ded9 :                  tdec12
                                set_stat $ff
                        
dedd : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
                        
def7 : ca                       dex
def8 : 300b                     bmi tdec13
defa : e001                     cpx #1
defc : d0db                     bne tdec12
defe : a981                     lda #$81
df00 : 8d0302                   sta abst
df03 : d0d4                     bne tdec12
df05 :                  tdec13
                                next_test
                        
                        
                        ; zeropage indexed
df14 : a200                     ldx #0
df16 : a97e                     lda #$7e
df18 : 950c             tinc4   sta zpt,x
                                set_stat 0
                        
df1e : f60c                     inc zpt,x
                                tst_zx rINC,fINC,0
                        
df36 : b50c                     lda zpt,x
df38 : e8                       inx
df39 : e002                     cpx #2
df3b : d002                     bne tinc5
df3d : a9fe                     lda #$fe
df3f : e005             tinc5   cpx #5
df41 : d0d5                     bne tinc4
df43 : ca                       dex
df44 : a902                     lda #2
df46 : 950c             tdec4   sta zpt,x
                                set_stat 0
                        
df4c : d60c                     dec zpt,x
                                tst_zx rINC,fINC,0
                        
df64 : b50c                     lda zpt,x
df66 : ca                       dex
df67 : 3008                     bmi tdec5
df69 : e001                     cpx #1
df6b : d0d9                     bne tdec4
df6d : a981                     lda #$81
df6f : d0d5                     bne tdec4
df71 :                  tdec5
df71 : a200                     ldx #0
df73 : a97e                     lda #$7e
df75 : 950c             tinc14  sta zpt,x
                                set_stat $ff
                        
df7b : f60c                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
                        
df93 : b50c                     lda zpt,x
df95 : e8                       inx
df96 : e002                     cpx #2
df98 : d002                     bne tinc15
df9a : a9fe                     lda #$fe
df9c : e005             tinc15  cpx #5
df9e : d0d5                     bne tinc14
dfa0 : ca                       dex
dfa1 : a902                     lda #2
dfa3 : 950c             tdec14  sta zpt,x
                                set_stat $ff
                        
dfa9 : d60c                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
                        
dfc1 : b50c                     lda zpt,x
dfc3 : ca                       dex
dfc4 : 3008                     bmi tdec15
dfc6 : e001                     cpx #1
dfc8 : d0d9                     bne tdec14
dfca : a981                     lda #$81
dfcc : d0d5                     bne tdec14
dfce :                  tdec15
                                next_test
                        
                        
                        ; memory indexed
dfdd : a200                     ldx #0
dfdf : a97e                     lda #$7e
dfe1 : 9d0302           tinc6   sta abst,x
                                set_stat 0
                        
dfe8 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
                        
e002 : bd0302                   lda abst,x
e005 : e8                       inx
e006 : e002                     cpx #2
e008 : d002                     bne tinc7
e00a : a9fe                     lda #$fe
e00c : e005             tinc7   cpx #5
e00e : d0d1                     bne tinc6
e010 : ca                       dex
e011 : a902                     lda #2
e013 : 9d0302           tdec6   sta abst,x
                                set_stat 0
                        
e01a : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
                        
e034 : bd0302                   lda abst,x
e037 : ca                       dex
e038 : 3008                     bmi tdec7
e03a : e001                     cpx #1
e03c : d0d5                     bne tdec6
e03e : a981                     lda #$81
e040 : d0d1                     bne tdec6
e042 :                  tdec7
e042 : a200                     ldx #0
e044 : a97e                     lda #$7e
e046 : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                        
e04d : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
                        
e067 : bd0302                   lda abst,x
e06a : e8                       inx
e06b : e002                     cpx #2
e06d : d002                     bne tinc17
e06f : a9fe                     lda #$fe
e071 : e005             tinc17  cpx #5
e073 : d0d1                     bne tinc16
e075 : ca                       dex
e076 : a902                     lda #2
e078 : 9d0302           tdec16  sta abst,x
                                set_stat $ff
                        
e07f : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
                        
e099 : bd0302                   lda abst,x
e09c : ca                       dex
e09d : 3008                     bmi tdec17
e09f : e001                     cpx #1
e0a1 : d0d5                     bne tdec16
e0a3 : a981                     lda #$81
e0a5 : d0d1                     bne tdec16
e0a7 :                  tdec17
                                next_test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
e0b6 : a203                     ldx #3          ;immediate
e0b8 : b51c             tand    lda zpAN,x
e0ba : 8d0902                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                        
e0c4 : 200802                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
                        
e0db : ca                       dex
e0dc : 10da                     bpl tand
e0de : a203                     ldx #3
e0e0 : b51c             tand1   lda zpAN,x
e0e2 : 8d0902                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                        
e0ec : 200802                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e103 : ca                       dex
e104 : 10da                     bpl tand1
                        
e106 : a203                     ldx #3      ;zp
e108 : b51c             tand2   lda zpAN,x
e10a : 850c                     sta zpt
                                set_ax  absANa,0
                        
e113 : 250c                     and zpt
                                tst_ax  absrlo,absflo,0
                        
e129 : ca                       dex
e12a : 10dc                     bpl tand2
e12c : a203                     ldx #3
e12e : b51c             tand3   lda zpAN,x
e130 : 850c                     sta zpt
                                set_ax  absANa,$ff
                        
e139 : 250c                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e14f : ca                       dex
e150 : 10dc                     bpl tand3
                        
e152 : a203                     ldx #3      ;abs
e154 : b51c             tand4   lda zpAN,x
e156 : 8d0302                   sta abst
                                set_ax  absANa,0
                        
e160 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
                        
e177 : ca                       dex
e178 : 10da                     bpl tand4
e17a : a203                     ldx #3
e17c : b51c             tand5   lda zpAN,x
e17e : 8d0302                   sta abst
                                set_ax  absANa,$ff
                        
e188 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e19f : ca                       dex
e1a0 : 1002                     bpl tand6
                        
e1a2 : a203                     ldx #3      ;zp,x
e1a4 :                  tand6
                                set_ax  absANa,0
                        
e1ab : 351c                     and zpAN,x
                                tst_ax  absrlo,absflo,0
                        
e1c1 : ca                       dex
e1c2 : 10e0                     bpl tand6
e1c4 : a203                     ldx #3
e1c6 :                  tand7
                                set_ax  absANa,$ff
                        
e1cd : 351c                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e1e3 : ca                       dex
e1e4 : 10e0                     bpl tand7
                        
e1e6 : a203                     ldx #3      ;abs,x
e1e8 :                  tand8
                                set_ax  absANa,0
                        
e1ef : 3d4e02                   and absAN,x
                                tst_ax  absrlo,absflo,0
                        
e206 : ca                       dex
e207 : 10df                     bpl tand8
e209 : a203                     ldx #3
e20b :                  tand9
                                set_ax  absANa,$ff
                        
e212 : 3d4e02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e229 : ca                       dex
e22a : 10df                     bpl tand9
                        
e22c : a003                     ldy #3      ;abs,y
e22e :                  tand10
                                set_ay  absANa,0
                        
e235 : 394e02                   and absAN,y
                                tst_ay  absrlo,absflo,0
                        
e24c : 88                       dey
e24d : 10df                     bpl tand10
e24f : a003                     ldy #3
e251 :                  tand11
                                set_ay  absANa,$ff
                        
e258 : 394e02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
e26f : 88                       dey
e270 : 10df                     bpl tand11
                        
e272 : a206                     ldx #6      ;(zp,x)
e274 : a003                     ldy #3
e276 :                  tand12
                                set_ay  absANa,0
                        
e27d : 213a                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
                        
e293 : ca                       dex
e294 : ca                       dex
e295 : 88                       dey
e296 : 10de                     bpl tand12
e298 : a206                     ldx #6
e29a : a003                     ldy #3
e29c :                  tand13
                                set_ay  absANa,$ff
                        
e2a3 : 213a                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
e2b9 : ca                       dex
e2ba : ca                       dex
e2bb : 88                       dey
e2bc : 10de                     bpl tand13
                        
e2be : a003                     ldy #3      ;(zp),y
e2c0 :                  tand14
                                set_ay  absANa,0
                        
e2c7 : 313a                     and (indAN),y
                                tst_ay  absrlo,absflo,0
                        
e2dd : 88                       dey
e2de : 10e0                     bpl tand14
e2e0 : a003                     ldy #3
e2e2 :                  tand15
                                set_ay  absANa,$ff
                        
e2e9 : 313a                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
e2ff : 88                       dey
e300 : 10e0                     bpl tand15
                                next_test
                        
                        
                        ; EOR
e311 : a203                     ldx #3          ;immediate - self modifying code
e313 : b520             teor    lda zpEO,x
e315 : 8d0c02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                        
e31f : 200b02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
                        
e336 : ca                       dex
e337 : 10da                     bpl teor
e339 : a203                     ldx #3
e33b : b520             teor1   lda zpEO,x
e33d : 8d0c02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                        
e347 : 200b02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e35e : ca                       dex
e35f : 10da                     bpl teor1
                        
e361 : a203                     ldx #3      ;zp
e363 : b520             teor2    lda zpEO,x
e365 : 850c                     sta zpt
                                set_ax  absEOa,0
                        
e36e : 450c                     eor zpt
                                tst_ax  absrlo,absflo,0
                        
e384 : ca                       dex
e385 : 10dc                     bpl teor2
e387 : a203                     ldx #3
e389 : b520             teor3   lda zpEO,x
e38b : 850c                     sta zpt
                                set_ax  absEOa,$ff
                        
e394 : 450c                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e3aa : ca                       dex
e3ab : 10dc                     bpl teor3
                        
e3ad : a203                     ldx #3      ;abs
e3af : b520             teor4   lda zpEO,x
e3b1 : 8d0302                   sta abst
                                set_ax  absEOa,0
                        
e3bb : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
                        
e3d2 : ca                       dex
e3d3 : 10da                     bpl teor4
e3d5 : a203                     ldx #3
e3d7 : b520             teor5   lda zpEO,x
e3d9 : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                        
e3e3 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e3fa : ca                       dex
e3fb : 1002                     bpl teor6
                        
e3fd : a203                     ldx #3      ;zp,x
e3ff :                  teor6
                                set_ax  absEOa,0
                        
e406 : 5520                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
                        
e41c : ca                       dex
e41d : 10e0                     bpl teor6
e41f : a203                     ldx #3
e421 :                  teor7
                                set_ax  absEOa,$ff
                        
e428 : 5520                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e43e : ca                       dex
e43f : 10e0                     bpl teor7
                        
e441 : a203                     ldx #3      ;abs,x
e443 :                  teor8
                                set_ax  absEOa,0
                        
e44a : 5d5202                   eor absEO,x
                                tst_ax  absrlo,absflo,0
                        
e461 : ca                       dex
e462 : 10df                     bpl teor8
e464 : a203                     ldx #3
e466 :                  teor9
                                set_ax  absEOa,$ff
                        
e46d : 5d5202                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e484 : ca                       dex
e485 : 10df                     bpl teor9
                        
e487 : a003                     ldy #3      ;abs,y
e489 :                  teor10
                                set_ay  absEOa,0
                        
e490 : 595202                   eor absEO,y
                                tst_ay  absrlo,absflo,0
                        
e4a7 : 88                       dey
e4a8 : 10df                     bpl teor10
e4aa : a003                     ldy #3
e4ac :                  teor11
                                set_ay  absEOa,$ff
                        
e4b3 : 595202                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
e4ca : 88                       dey
e4cb : 10df                     bpl teor11
                        
e4cd : a206                     ldx #6      ;(zp,x)
e4cf : a003                     ldy #3
e4d1 :                  teor12
                                set_ay  absEOa,0
                        
e4d8 : 4142                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
                        
e4ee : ca                       dex
e4ef : ca                       dex
e4f0 : 88                       dey
e4f1 : 10de                     bpl teor12
e4f3 : a206                     ldx #6
e4f5 : a003                     ldy #3
e4f7 :                  teor13
                                set_ay  absEOa,$ff
                        
e4fe : 4142                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
e514 : ca                       dex
e515 : ca                       dex
e516 : 88                       dey
e517 : 10de                     bpl teor13
                        
e519 : a003                     ldy #3      ;(zp),y
e51b :                  teor14
                                set_ay  absEOa,0
                        
e522 : 5142                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
                        
e538 : 88                       dey
e539 : 10e0                     bpl teor14
e53b : a003                     ldy #3
e53d :                  teor15
                                set_ay  absEOa,$ff
                        
e544 : 5142                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
e55a : 88                       dey
e55b : 10e0                     bpl teor15
                                next_test
                        
                        
                        ; OR
e56c : a203                     ldx #3          ;immediate - self modifying code
e56e : b518             tora    lda zpOR,x
e570 : 8d0f02                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                        
e57a : 200e02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
                        
e591 : ca                       dex
e592 : 10da                     bpl tora
e594 : a203                     ldx #3
e596 : b518             tora1   lda zpOR,x
e598 : 8d0f02                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                        
e5a2 : 200e02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e5b9 : ca                       dex
e5ba : 10da                     bpl tora1
                        
e5bc : a203                     ldx #3      ;zp
e5be : b518             tora2   lda zpOR,x
e5c0 : 850c                     sta zpt
                                set_ax  absORa,0
                        
e5c9 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,0
                        
e5df : ca                       dex
e5e0 : 10dc                     bpl tora2
e5e2 : a203                     ldx #3
e5e4 : b518             tora3   lda zpOR,x
e5e6 : 850c                     sta zpt
                                set_ax  absORa,$ff
                        
e5ef : 050c                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e605 : ca                       dex
e606 : 10dc                     bpl tora3
                        
e608 : a203                     ldx #3      ;abs
e60a : b518             tora4   lda zpOR,x
e60c : 8d0302                   sta abst
                                set_ax  absORa,0
                        
e616 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
                        
e62d : ca                       dex
e62e : 10da                     bpl tora4
e630 : a203                     ldx #3
e632 : b518             tora5   lda zpOR,x
e634 : 8d0302                   sta abst
                                set_ax  absORa,$ff
                        
e63e : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e655 : ca                       dex
e656 : 1002                     bpl tora6
                        
e658 : a203                     ldx #3      ;zp,x
e65a :                  tora6
                                set_ax  absORa,0
                        
e661 : 1518                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
                        
e677 : ca                       dex
e678 : 10e0                     bpl tora6
e67a : a203                     ldx #3
e67c :                  tora7
                                set_ax  absORa,$ff
                        
e683 : 1518                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e699 : ca                       dex
e69a : 10e0                     bpl tora7
                        
e69c : a203                     ldx #3      ;abs,x
e69e :                  tora8
                                set_ax  absORa,0
                        
e6a5 : 1d4a02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
                        
e6bc : ca                       dex
e6bd : 10df                     bpl tora8
e6bf : a203                     ldx #3
e6c1 :                  tora9
                                set_ax  absORa,$ff
                        
e6c8 : 1d4a02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
e6df : ca                       dex
e6e0 : 10df                     bpl tora9
                        
e6e2 : a003                     ldy #3      ;abs,y
e6e4 :                  tora10
                                set_ay  absORa,0
                        
e6eb : 194a02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
                        
e702 : 88                       dey
e703 : 10df                     bpl tora10
e705 : a003                     ldy #3
e707 :                  tora11
                                set_ay  absORa,$ff
                        
e70e : 194a02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
e725 : 88                       dey
e726 : 10df                     bpl tora11
                        
e728 : a206                     ldx #6      ;(zp,x)
e72a : a003                     ldy #3
e72c :                  tora12
                                set_ay  absORa,0
                        
e733 : 014a                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
                        
e749 : ca                       dex
e74a : ca                       dex
e74b : 88                       dey
e74c : 10de                     bpl tora12
e74e : a206                     ldx #6
e750 : a003                     ldy #3
e752 :                  tora13
                                set_ay  absORa,$ff
                        
e759 : 014a                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
e76f : ca                       dex
e770 : ca                       dex
e771 : 88                       dey
e772 : 10de                     bpl tora13
                        
e774 : a003                     ldy #3      ;(zp),y
e776 :                  tora14
                                set_ay  absORa,0
                        
e77d : 114a                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
                        
e793 : 88                       dey
e794 : 10e0                     bpl tora14
e796 : a003                     ldy #3
e798 :                  tora15
                                set_ay  absORa,$ff
                        
e79f : 114a                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
e7b5 : 88                       dey
e7b6 : 10e0                     bpl tora15
                            if I_flag = 3
e7b8 : 58                       cli
                            endif
                                next_test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
e7c8 : d8                       cld
e7c9 : a20e                     ldx #ad2        ;for indexed test
e7cb : a0ff                     ldy #$ff        ;max range
e7cd : a900                     lda #0          ;start with adding zeroes & no carry
e7cf : 850c                     sta adfc        ;carry in - for diag
e7d1 : 850d                     sta ad1         ;operand 1 - accumulator
e7d3 : 850e                     sta ad2         ;operand 2 - memory or immediate
e7d5 : 8d0302                   sta ada2        ;non zp
e7d8 : 850f                     sta adrl        ;expected result bits 0-7
e7da : 8510                     sta adrh        ;expected result bit 8 (carry out)
e7dc : a9ff                     lda #$ff        ;complemented operand 2 for subtract
e7de : 8512                     sta sb2
e7e0 : 8d0402                   sta sba2        ;non zp
e7e3 : a902                     lda #2          ;expected Z-flag
e7e5 : 8511                     sta adrf
e7e7 : 18               tadd    clc             ;test with carry clear
e7e8 : 201feb                   jsr chkadd
e7eb : e60c                     inc adfc        ;now with carry
e7ed : e60f                     inc adrl        ;result +1
e7ef : 08                       php             ;save N & Z from low result
e7f0 : 08                       php
e7f1 : 68                       pla             ;accu holds expected flags
e7f2 : 2982                     and #$82        ;mask N & Z
e7f4 : 28                       plp
e7f5 : d002                     bne tadd1
e7f7 : e610                     inc adrh        ;result bit 8 - carry
e7f9 : 0510             tadd1   ora adrh        ;merge C to expected flags
e7fb : 8511                     sta adrf        ;save expected flags except overflow
e7fd : 38                       sec             ;test with carry set
e7fe : 201feb                   jsr chkadd
e801 : c60c                     dec adfc        ;same for operand +1 but no carry
e803 : e60d                     inc ad1
e805 : d0e0                     bne tadd        ;iterate op1
e807 : a900                     lda #0          ;preset result to op2 when op1 = 0
e809 : 8510                     sta adrh
e80b : ee0302                   inc ada2
e80e : e60e                     inc ad2
e810 : 08                       php             ;save NZ as operand 2 becomes the new result
e811 : 68                       pla
e812 : 2982                     and #$82        ;mask N00000Z0
e814 : 8511                     sta adrf        ;no need to check carry as we are adding to 0
e816 : c612                     dec sb2         ;complement subtract operand 2
e818 : ce0402                   dec sba2
e81b : a50e                     lda ad2
e81d : 850f                     sta adrl
e81f : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
e830 : f8                       sed
e831 : a20e                     ldx #ad2        ;for indexed test
e833 : a0ff                     ldy #$ff        ;max range
e835 : a999                     lda #$99        ;start with adding 99 to 99 with carry
e837 : 850d                     sta ad1         ;operand 1 - accumulator
e839 : 850e                     sta ad2         ;operand 2 - memory or immediate
e83b : 8d0302                   sta ada2        ;non zp
e83e : 850f                     sta adrl        ;expected result bits 0-7
e840 : a901                     lda #1          ;set carry in & out
e842 : 850c                     sta adfc        ;carry in - for diag
e844 : 8510                     sta adrh        ;expected result bit 8 (carry out)
e846 : a900                     lda #0          ;complemented operand 2 for subtract
e848 : 8512                     sta sb2
e84a : 8d0402                   sta sba2        ;non zp
e84d : 38               tdad    sec             ;test with carry set
e84e : 208ce9                   jsr chkdad
e851 : c60c                     dec adfc        ;now with carry clear
e853 : a50f                     lda adrl        ;decimal adjust result
e855 : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
e857 : c610                     dec adrh
e859 : a999                     lda #$99
e85b : 850f                     sta adrl
e85d : d012                     bne tdad3
e85f : 290f             tdad1   and #$f         ;lower nibble mask
e861 : d00c                     bne tdad2       ;no decimal adjust needed
e863 : c60f                     dec adrl        ;decimal adjust (?0-6)
e865 : c60f                     dec adrl
e867 : c60f                     dec adrl
e869 : c60f                     dec adrl
e86b : c60f                     dec adrl
e86d : c60f                     dec adrl
e86f : c60f             tdad2   dec adrl        ;result -1
e871 : 18               tdad3   clc             ;test with carry clear
e872 : 208ce9                   jsr chkdad
e875 : e60c                     inc adfc        ;same for operand -1 but with carry
e877 : a50d                     lda ad1         ;decimal adjust operand 1
e879 : f015                     beq tdad5       ;iterate operand 2
e87b : 290f                     and #$f         ;lower nibble mask
e87d : d00c                     bne tdad4       ;skip decimal adjust
e87f : c60d                     dec ad1         ;decimal adjust (?0-6)
e881 : c60d                     dec ad1
e883 : c60d                     dec ad1
e885 : c60d                     dec ad1
e887 : c60d                     dec ad1
e889 : c60d                     dec ad1
e88b : c60d             tdad4   dec ad1         ;operand 1 -1
e88d : 4c4de8                   jmp tdad        ;iterate op1
                        
e890 : a999             tdad5   lda #$99        ;precharge op1 max
e892 : 850d                     sta ad1
e894 : a50e                     lda ad2         ;decimal adjust operand 2
e896 : f030                     beq tdad7       ;end of iteration
e898 : 290f                     and #$f         ;lower nibble mask
e89a : d018                     bne tdad6       ;skip decimal adjust
e89c : c60e                     dec ad2         ;decimal adjust (?0-6)
e89e : c60e                     dec ad2
e8a0 : c60e                     dec ad2
e8a2 : c60e                     dec ad2
e8a4 : c60e                     dec ad2
e8a6 : c60e                     dec ad2
e8a8 : e612                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
e8aa : e612                     inc sb2
e8ac : e612                     inc sb2
e8ae : e612                     inc sb2
e8b0 : e612                     inc sb2
e8b2 : e612                     inc sb2
e8b4 : c60e             tdad6   dec ad2         ;operand 2 -1
e8b6 : e612                     inc sb2         ;complemented operand for subtract
e8b8 : a512                     lda sb2
e8ba : 8d0402                   sta sba2        ;copy as non zp operand
e8bd : a50e                     lda ad2
e8bf : 8d0302                   sta ada2        ;copy as non zp operand
e8c2 : 850f                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
e8c4 : e610                     inc adrh        ;result carry
e8c6 : d085                     bne tdad        ;iterate op2
e8c8 :                  tdad7
                                next_test
                        
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
e8d7 : 18                       clc
e8d8 : d8                       cld
e8d9 : 08                       php
e8da : a955                     lda #$55
e8dc : 6955                     adc #$55
e8de : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after cld
                        
e8e5 : 18                       clc
e8e6 : f8                       sed
e8e7 : 08                       php
e8e8 : a955                     lda #$55
e8ea : 6955                     adc #$55
e8ec : c910                     cmp #$10
                                trap_ne         ;expected decimal result after sed
                        
e8f3 : d8                       cld
e8f4 : 28                       plp
e8f5 : a955                     lda #$55
e8f7 : 6955                     adc #$55
e8f9 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
                        
e900 : 28                       plp
e901 : a955                     lda #$55
e903 : 6955                     adc #$55
e905 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
                        
e90c : 18                       clc
e90d : a9e9                     lda #hi bin_rti_ret ;emulated interrupt for rti
e90f : 48                       pha
e910 : a92a                     lda #lo bin_rti_ret
e912 : 48                       pha
e913 : 08                       php
e914 : f8                       sed
e915 : a9e9                     lda #hi dec_rti_ret ;emulated interrupt for rti
e917 : 48                       pha
e918 : a91e                     lda #lo dec_rti_ret
e91a : 48                       pha
e91b : 08                       php
e91c : d8                       cld
e91d : 40                       rti
e91e :                  dec_rti_ret
e91e : a955                     lda #$55
e920 : 6955                     adc #$55
e922 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
                        
e929 : 40                       rti
e92a :                  bin_rti_ret
e92a : a955                     lda #$55
e92c : 6955                     adc #$55
e92e : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
                        
                            endif
                        
e935 : ad0002                   lda test_case
e938 : c92b                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
                        
e93f : a9f0                     lda #$f0        ;mark opcode testing complete
e941 : 8d0002                   sta test_case
                        
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------
                                success         ;if you get here everything went well
                        
                        ; -------------
                        ; S U C C E S S ************************************************
e989 : 4c00ae                   jmp start       ;run again
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
e98c :                  chkdad
                        ; decimal ADC / SBC zp
e98c : 08                       php             ;save carry for subtract
e98d : a50d                     lda ad1
e98f : 650e                     adc ad2         ;perform add
e991 : 08                       php
e992 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
e999 : 68                       pla             ;check flags
e99a : 2901                     and #1          ;mask carry
e99c : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
e9a3 : 28                       plp
e9a4 : 08                       php             ;save carry for next add
e9a5 : a50d                     lda ad1
e9a7 : e512                     sbc sb2         ;perform subtract
e9a9 : 08                       php
e9aa : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
e9b1 : 68                       pla             ;check flags
e9b2 : 2901                     and #1          ;mask carry
e9b4 : c510                     cmp adrh
                                trap_ne         ;bad flags
                        
e9bb : 28                       plp
                        ; decimal ADC / SBC abs
e9bc : 08                       php             ;save carry for subtract
e9bd : a50d                     lda ad1
e9bf : 6d0302                   adc ada2        ;perform add
e9c2 : 08                       php
e9c3 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
e9ca : 68                       pla             ;check flags
e9cb : 2901                     and #1          ;mask carry
e9cd : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
e9d4 : 28                       plp
e9d5 : 08                       php             ;save carry for next add
e9d6 : a50d                     lda ad1
e9d8 : ed0402                   sbc sba2        ;perform subtract
e9db : 08                       php
e9dc : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
e9e3 : 68                       pla             ;check flags
e9e4 : 2901                     and #1          ;mask carry
e9e6 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
e9ed : 28                       plp
                        ; decimal ADC / SBC #
e9ee : 08                       php             ;save carry for subtract
e9ef : a50e                     lda ad2
e9f1 : 8d1202                   sta ex_adci+1   ;set ADC # operand
e9f4 : a50d                     lda ad1
e9f6 : 201102                   jsr ex_adci     ;execute ADC # in RAM
e9f9 : 08                       php
e9fa : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ea01 : 68                       pla             ;check flags
ea02 : 2901                     and #1          ;mask carry
ea04 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
ea0b : 28                       plp
ea0c : 08                       php             ;save carry for next add
ea0d : a512                     lda sb2
ea0f : 8d1502                   sta ex_sbci+1   ;set SBC # operand
ea12 : a50d                     lda ad1
ea14 : 201402                   jsr ex_sbci     ;execute SBC # in RAM
ea17 : 08                       php
ea18 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ea1f : 68                       pla             ;check flags
ea20 : 2901                     and #1          ;mask carry
ea22 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
ea29 : 28                       plp
                        ; decimal ADC / SBC zp,x
ea2a : 08                       php             ;save carry for subtract
ea2b : a50d                     lda ad1
ea2d : 7500                     adc 0,x         ;perform add
ea2f : 08                       php
ea30 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ea37 : 68                       pla             ;check flags
ea38 : 2901                     and #1          ;mask carry
ea3a : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
ea41 : 28                       plp
ea42 : 08                       php             ;save carry for next add
ea43 : a50d                     lda ad1
ea45 : f504                     sbc sb2-ad2,x   ;perform subtract
ea47 : 08                       php
ea48 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ea4f : 68                       pla             ;check flags
ea50 : 2901                     and #1          ;mask carry
ea52 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
ea59 : 28                       plp
                        ; decimal ADC / SBC abs,x
ea5a : 08                       php             ;save carry for subtract
ea5b : a50d                     lda ad1
ea5d : 7df501                   adc ada2-ad2,x  ;perform add
ea60 : 08                       php
ea61 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ea68 : 68                       pla             ;check flags
ea69 : 2901                     and #1          ;mask carry
ea6b : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
ea72 : 28                       plp
ea73 : 08                       php             ;save carry for next add
ea74 : a50d                     lda ad1
ea76 : fdf601                   sbc sba2-ad2,x  ;perform subtract
ea79 : 08                       php
ea7a : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ea81 : 68                       pla             ;check flags
ea82 : 2901                     and #1          ;mask carry
ea84 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
ea8b : 28                       plp
                        ; decimal ADC / SBC abs,y
ea8c : 08                       php             ;save carry for subtract
ea8d : a50d                     lda ad1
ea8f : 790401                   adc ada2-$ff,y  ;perform add
ea92 : 08                       php
ea93 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ea9a : 68                       pla             ;check flags
ea9b : 2901                     and #1          ;mask carry
ea9d : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
eaa4 : 28                       plp
eaa5 : 08                       php             ;save carry for next add
eaa6 : a50d                     lda ad1
eaa8 : f90501                   sbc sba2-$ff,y  ;perform subtract
eaab : 08                       php
eaac : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
eab3 : 68                       pla             ;check flags
eab4 : 2901                     and #1          ;mask carry
eab6 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
eabd : 28                       plp
                        ; decimal ADC / SBC (zp,x)
eabe : 08                       php             ;save carry for subtract
eabf : a50d                     lda ad1
eac1 : 6144                     adc (lo adi2-ad2,x) ;perform add
eac3 : 08                       php
eac4 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
eacb : 68                       pla             ;check flags
eacc : 2901                     and #1          ;mask carry
eace : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
ead5 : 28                       plp
ead6 : 08                       php             ;save carry for next add
ead7 : a50d                     lda ad1
ead9 : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
eadb : 08                       php
eadc : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
eae3 : 68                       pla             ;check flags
eae4 : 2901                     and #1          ;mask carry
eae6 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
eaed : 28                       plp
                        ; decimal ADC / SBC (abs),y
eaee : 08                       php             ;save carry for subtract
eaef : a50d                     lda ad1
eaf1 : 7156                     adc (adiy2),y   ;perform add
eaf3 : 08                       php
eaf4 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
eafb : 68                       pla             ;check flags
eafc : 2901                     and #1          ;mask carry
eafe : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
eb05 : 28                       plp
eb06 : 08                       php             ;save carry for next add
eb07 : a50d                     lda ad1
eb09 : f158                     sbc (sbiy2),y   ;perform subtract
eb0b : 08                       php
eb0c : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
eb13 : 68                       pla             ;check flags
eb14 : 2901                     and #1          ;mask carry
eb16 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
eb1d : 28                       plp
eb1e : 60                       rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
eb1f : a511             chkadd  lda adrf        ;add V-flag if overflow
eb21 : 2983                     and #$83        ;keep N-----ZC / clear V
eb23 : 48                       pha
eb24 : a50d                     lda ad1         ;test sign unequal between operands
eb26 : 450e                     eor ad2
eb28 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
eb2a : a50d                     lda ad1         ;test sign equal between operands and result
eb2c : 450f                     eor adrl
eb2e : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
eb30 : 68                       pla
eb31 : 0940                     ora #$40        ;set V
eb33 : 48                       pha
eb34 : 68               ckad1   pla
eb35 : 8511                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
eb37 : 08                       php             ;save carry for subtract
eb38 : a50d                     lda ad1
eb3a : 650e                     adc ad2         ;perform add
eb3c : 08                       php
eb3d : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
eb44 : 68                       pla             ;check flags
eb45 : 29c3                     and #$c3        ;mask NV----ZC
eb47 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
eb4e : 28                       plp
eb4f : 08                       php             ;save carry for next add
eb50 : a50d                     lda ad1
eb52 : e512                     sbc sb2         ;perform subtract
eb54 : 08                       php
eb55 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
eb5c : 68                       pla             ;check flags
eb5d : 29c3                     and #$c3        ;mask NV----ZC
eb5f : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
eb66 : 28                       plp
                        ; binary ADC / SBC abs
eb67 : 08                       php             ;save carry for subtract
eb68 : a50d                     lda ad1
eb6a : 6d0302                   adc ada2        ;perform add
eb6d : 08                       php
eb6e : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
eb75 : 68                       pla             ;check flags
eb76 : 29c3                     and #$c3        ;mask NV----ZC
eb78 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
eb7f : 28                       plp
eb80 : 08                       php             ;save carry for next add
eb81 : a50d                     lda ad1
eb83 : ed0402                   sbc sba2        ;perform subtract
eb86 : 08                       php
eb87 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
eb8e : 68                       pla             ;check flags
eb8f : 29c3                     and #$c3        ;mask NV----ZC
eb91 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
eb98 : 28                       plp
                        ; binary ADC / SBC #
eb99 : 08                       php             ;save carry for subtract
eb9a : a50e                     lda ad2
eb9c : 8d1202                   sta ex_adci+1   ;set ADC # operand
eb9f : a50d                     lda ad1
eba1 : 201102                   jsr ex_adci     ;execute ADC # in RAM
eba4 : 08                       php
eba5 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ebac : 68                       pla             ;check flags
ebad : 29c3                     and #$c3        ;mask NV----ZC
ebaf : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ebb6 : 28                       plp
ebb7 : 08                       php             ;save carry for next add
ebb8 : a512                     lda sb2
ebba : 8d1502                   sta ex_sbci+1   ;set SBC # operand
ebbd : a50d                     lda ad1
ebbf : 201402                   jsr ex_sbci     ;execute SBC # in RAM
ebc2 : 08                       php
ebc3 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ebca : 68                       pla             ;check flags
ebcb : 29c3                     and #$c3        ;mask NV----ZC
ebcd : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ebd4 : 28                       plp
                        ; binary ADC / SBC zp,x
ebd5 : 08                       php             ;save carry for subtract
ebd6 : a50d                     lda ad1
ebd8 : 7500                     adc 0,x         ;perform add
ebda : 08                       php
ebdb : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ebe2 : 68                       pla             ;check flags
ebe3 : 29c3                     and #$c3        ;mask NV----ZC
ebe5 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ebec : 28                       plp
ebed : 08                       php             ;save carry for next add
ebee : a50d                     lda ad1
ebf0 : f504                     sbc sb2-ad2,x   ;perform subtract
ebf2 : 08                       php
ebf3 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ebfa : 68                       pla             ;check flags
ebfb : 29c3                     and #$c3        ;mask NV----ZC
ebfd : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ec04 : 28                       plp
                        ; binary ADC / SBC abs,x
ec05 : 08                       php             ;save carry for subtract
ec06 : a50d                     lda ad1
ec08 : 7df501                   adc ada2-ad2,x  ;perform add
ec0b : 08                       php
ec0c : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ec13 : 68                       pla             ;check flags
ec14 : 29c3                     and #$c3        ;mask NV----ZC
ec16 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ec1d : 28                       plp
ec1e : 08                       php             ;save carry for next add
ec1f : a50d                     lda ad1
ec21 : fdf601                   sbc sba2-ad2,x  ;perform subtract
ec24 : 08                       php
ec25 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ec2c : 68                       pla             ;check flags
ec2d : 29c3                     and #$c3        ;mask NV----ZC
ec2f : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ec36 : 28                       plp
                        ; binary ADC / SBC abs,y
ec37 : 08                       php             ;save carry for subtract
ec38 : a50d                     lda ad1
ec3a : 790401                   adc ada2-$ff,y  ;perform add
ec3d : 08                       php
ec3e : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ec45 : 68                       pla             ;check flags
ec46 : 29c3                     and #$c3        ;mask NV----ZC
ec48 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ec4f : 28                       plp
ec50 : 08                       php             ;save carry for next add
ec51 : a50d                     lda ad1
ec53 : f90501                   sbc sba2-$ff,y  ;perform subtract
ec56 : 08                       php
ec57 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ec5e : 68                       pla             ;check flags
ec5f : 29c3                     and #$c3        ;mask NV----ZC
ec61 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ec68 : 28                       plp
                        ; binary ADC / SBC (zp,x)
ec69 : 08                       php             ;save carry for subtract
ec6a : a50d                     lda ad1
ec6c : 6144                     adc (lo adi2-ad2,x) ;perform add
ec6e : 08                       php
ec6f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ec76 : 68                       pla             ;check flags
ec77 : 29c3                     and #$c3        ;mask NV----ZC
ec79 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ec80 : 28                       plp
ec81 : 08                       php             ;save carry for next add
ec82 : a50d                     lda ad1
ec84 : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
ec86 : 08                       php
ec87 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ec8e : 68                       pla             ;check flags
ec8f : 29c3                     and #$c3        ;mask NV----ZC
ec91 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ec98 : 28                       plp
                        ; binary ADC / SBC (abs),y
ec99 : 08                       php             ;save carry for subtract
ec9a : a50d                     lda ad1
ec9c : 7156                     adc (adiy2),y   ;perform add
ec9e : 08                       php
ec9f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
eca6 : 68                       pla             ;check flags
eca7 : 29c3                     and #$c3        ;mask NV----ZC
eca9 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ecb0 : 28                       plp
ecb1 : 08                       php             ;save carry for next add
ecb2 : a50d                     lda ad1
ecb4 : f158                     sbc (sbiy2),y   ;perform subtract
ecb6 : 08                       php
ecb7 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
ecbe : 68                       pla             ;check flags
ecbf : 29c3                     and #$c3        ;mask NV----ZC
ecc1 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
ecc8 : 28                       plp
ecc9 : 60                       rts
                        
                        ; target for the jump absolute test
ecca : 88                       dey
eccb : 88                       dey
eccc :                  test_far
eccc : 08                       php             ;either SP or Y count will fail, if we do not hit
eccd : 88                       dey
ecce : 88                       dey
eccf : 88                       dey
ecd0 : 28                       plp
                                trap_cs         ;flags loaded?
                        
                                trap_vs
                        
                                trap_mi
                        
                                trap_eq
                        
ece5 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
                        
ecec : e041                     cpx #'A'
                                trap_ne
                        
ecf3 : c04f                     cpy #('R'-3)
                                trap_ne
                        
ecfa : 48                       pha             ;save a,x
ecfb : 8a                       txa
ecfc : 48                       pha
ecfd : ba                       tsx
ecfe : e0fd                     cpx #$fd        ;check SP
                                trap_ne
                        
ed05 : 68                       pla             ;restore x
ed06 : aa                       tax
                                set_stat $ff
                        
ed0b : 68                       pla             ;restore a
ed0c : e8                       inx             ;return registers with modifications
ed0d : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
ed0f : 4c26b4                   jmp far_ret
                        
                        ; target for the jump indirect test
                                align
ed12 : 1bed             ptr_tst_ind dw test_ind
ed14 : aeb4             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
                        
ed19 : 88                       dey
ed1a : 88                       dey
ed1b :                  test_ind
ed1b : 08                       php             ;either SP or Y count will fail, if we do not hit
ed1c : 88                       dey
ed1d : 88                       dey
ed1e : 88                       dey
ed1f : 28                       plp
                                trap_cs         ;flags loaded?
                        
                                trap_vs
                        
                                trap_mi
                        
                                trap_eq
                        
ed34 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
                        
ed3b : e04e                     cpx #'N'
                                trap_ne
                        
ed42 : c041                     cpy #('D'-3)
                                trap_ne
                        
ed49 : 48                       pha             ;save a,x
ed4a : 8a                       txa
ed4b : 48                       pha
ed4c : ba                       tsx
ed4d : e0fd                     cpx #$fd        ;check SP
                                trap_ne
                        
ed54 : 68                       pla             ;restore x
ed55 : aa                       tax
                                set_stat $ff
                        
ed5a : 68                       pla             ;restore a
ed5b : e8                       inx             ;return registers with modifications
ed5c : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
ed5e : 6c14ed                   jmp (ptr_ind_ret)
                                trap            ;runover protection
                        
                        
                        ; target for the jump subroutine test
ed64 : 88                       dey
ed65 : 88                       dey
ed66 :                  test_jsr
ed66 : 08                       php             ;either SP or Y count will fail, if we do not hit
ed67 : 88                       dey
ed68 : 88                       dey
ed69 : 88                       dey
ed6a : 28                       plp
                                trap_cs         ;flags loaded?
                        
                                trap_vs
                        
                                trap_mi
                        
                                trap_eq
                        
ed7f : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
                        
ed86 : e053                     cpx #'S'
                                trap_ne
                        
ed8d : c04f                     cpy #('R'-3)
                                trap_ne
                        
ed94 : 48                       pha             ;save a,x
ed95 : 8a                       txa
ed96 : 48                       pha
ed97 : ba                       tsx             ;sp -4? (return addr,a,x)
ed98 : e0fb                     cpx #$fb
                                trap_ne
                        
ed9f : adff01                   lda $1ff        ;propper return on stack
eda2 : c9b4                     cmp #hi(jsr_ret)
                                trap_ne
                        
eda9 : adfe01                   lda $1fe
edac : c9ff                     cmp #lo(jsr_ret)
                                trap_ne
                        
                                set_stat $ff
                        
edb7 : 68                       pla             ;pull x,a
edb8 : aa                       tax
edb9 : 68                       pla
edba : e8                       inx             ;return registers with modifications
edbb : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
edbd : 60                       rts
                                trap            ;runover protection
                        
                        
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
edc1 :                  nmi_trap
                                trap            ;check stack for conditions at NMI
                        
edc4 :                  res_trap
                                trap            ;unexpected RESET
                        
                        
edc7 : 88                       dey
edc8 : 88                       dey
edc9 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
edc9 : 08                       php             ;either SP or Y count will fail, if we do not hit
edca : 88                       dey
edcb : 88                       dey
edcc : 88                       dey
                                ;next 4 traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
edcd : c942                     cmp #'B'        ;registers loaded?
                                trap_ne
                        
edd4 : e052                     cpx #'R'
                                trap_ne
                        
eddb : c048                     cpy #('K'-3)
                                trap_ne
                        
ede2 : 850a                     sta irq_a       ;save registers during break test
ede4 : 860b                     stx irq_x
ede6 : ba                       tsx             ;test break on stack
ede7 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1
                        
                                trap_ne         ; - no break flag on stack
                        
edf1 : 68                       pla
edf2 : c934                     cmp #fai        ;should have added interrupt disable
                                trap_ne
                        
edf9 : ba                       tsx
edfa : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
                        
ee01 : adff01                   lda $1ff        ;propper return on stack
ee04 : c9b5                     cmp #hi(brk_ret)
                                trap_ne
                        
ee0b : adfe01                   lda $1fe
ee0e : c951                     cmp #lo(brk_ret)
                                trap_ne
                        
                                set_stat $ff
                        
ee19 : a60b                     ldx irq_x
ee1b : e8                       inx             ;return registers with modifications
ee1c : a50a                     lda irq_a
ee1e : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1 but original flags should be restored
ee20 : 40                       rti
                                trap            ;runover protection
                        
                        
                            if report = 1
                                include "report.i65"
                        ;**** report 6502 funtional test errors to standard I/O ****
                        ;
                        ;this include file is part of the 6502 functional tests
                        ;it is used when you configure report = 1 in the tests
                        ;
                        ;to adopt the standard output vectors of your test environment
                        ;you must modify the rchar and rget subroutines in this include
                        ;
                        ;I/O hardware may have to be initialized in report_init
                        
                        ;print message macro - \1 = message location
                        rprt    macro
                                ldx #0
                                lda \1
                        loop\?
                                jsr rchar
                                inx
                                lda \1,x
                                bne loop\?
                                endm
                        
                        ;initialize I/O as required (example: configure & enable ACIA)
ee24 :                  report_init
                                ;nothing to initialize
                                rprt rmsg_start
                        
ee32 : 60                       rts
                                
                        ;show stack (with saved registers), zeropage and absolute memory workspace
                        ;after an error was trapped in the test program
ee33 :                  report_error
                        ;save registers
ee33 : 08                       php
ee34 : 48                       pha
ee35 : 8a                       txa
ee36 : 48                       pha
ee37 : 98                       tya
ee38 : 48                       pha
ee39 : d8                       cld
                        ;show stack with index to registers at error
                                rprt rmsg_stack
                        
ee48 : ba                       tsx
ee49 : e8                       inx
ee4a : a901                     lda #1      ;address high
ee4c : 20e0ee                   jsr rhex
ee4f : 8a                       txa         ;address low
ee50 : 20e0ee                   jsr rhex
ee53 : 20dcee           rstack  jsr rspace
ee56 : bd0001                   lda $100,x  ;stack data
ee59 : 20e0ee                   jsr rhex
ee5c : e8                       inx
ee5d : d0f4                     bne rstack
ee5f : 20d3ee                   jsr rcrlf   ;new line
                        ;show zero page workspace
ee62 : a900                     lda #0
ee64 : 20e0ee                   jsr rhex
ee67 : a90c                     lda #zpt
ee69 : aa                       tax
ee6a : 20e0ee                   jsr rhex
ee6d : 20dcee           rzp     jsr rspace
ee70 : b500                     lda 0,x
ee72 : 20e0ee                   jsr rhex
ee75 : e8                       inx
ee76 : e013                     cpx #zp_bss
ee78 : d0f3                     bne rzp
ee7a : 20d3ee                   jsr rcrlf
                        ;show absolute workspace
ee7d : a902                     lda #hi(data_segment)
ee7f : 20e0ee                   jsr rhex
ee82 : a900                     lda #lo(data_segment)
ee84 : 20e0ee                   jsr rhex
ee87 : a200                     ldx #0
ee89 : 20dcee           rabs    jsr rspace
ee8c : bd0002                   lda data_segment,x
ee8f : 20e0ee                   jsr rhex
ee92 : e8                       inx
ee93 : e008                     cpx #(data_bss-data_segment)
ee95 : d0f2                     bne rabs
                        ;ask to continue
                                rprt rmsg_cont
                        
eea5 : 20c9ee           rerr1   jsr rget
eea8 : c943                     cmp #'C'
eeaa : d0f9                     bne rerr1        
                        ;restore registers
eeac : 68                       pla
eead : a8                       tay
eeae : 68                       pla
eeaf : aa                       tax
eeb0 : 68                       pla 
eeb1 : 28                       plp
eeb2 : 60                       rts   
                        
                        ;show test has ended, ask to repeat
eeb3 :                  report_success
                            if rep_int = 1
                                rprt rmsg_priority
                                lda data_segment    ;show interrupt sequence
                                jsr rhex
                                jsr rspace
                                lda data_segment+1
                                jsr rhex
                                jsr rspace
                                lda data_segment+2
                                jsr rhex
                            endif
                                rprt rmsg_success
                        
eec1 : 20c9ee           rsuc1   jsr rget
eec4 : c952                     cmp #'R'
eec6 : d0f9                     bne rsuc1        
eec8 : 60                       rts
                        
                        ;input subroutine
                        ;get a character from standard input 
                        ;adjust according to the needs in your test environment
eec9 :                  rget                ;get character in A
                        ;rget1
                        ;        lda $bff1   ;wait RDRF
                        ;        and #8
                        ;        beq rget1
                        ;not a real ACIA - so RDRF is not checked
eec9 : ad04f0                   lda $f004   ;read acia rx reg
                        ;the load can be replaced by a call to a kernal routine
                        ;        jsr $ffcf   ;example: CHRIN for a C64
eecc : c961                     cmp #'a'    ;lower case
eece : 9002                     bcc rget1
eed0 : 295f                     and #$5f    ;convert to upper case
eed2 : 60               rget1   rts
                        
                        ;output subroutines
eed3 : a90a             rcrlf   lda #10
eed5 : 20f4ee                   jsr rchar
eed8 : a90d                     lda #13
eeda : d018                     bne rchar
                        
eedc : a920             rspace  lda #' '
eede : d014                     bne rchar
                                
eee0 : 48               rhex    pha         ;report hex byte in A
eee1 : 4a                       lsr a       ;high nibble first
eee2 : 4a                       lsr a
eee3 : 4a                       lsr a
eee4 : 4a                       lsr a
eee5 : 20ebee                   jsr rnib
eee8 : 68                       pla         ;now low nibble
eee9 : 290f                     and #$f
                        
eeeb : 18               rnib    clc         ;report nibble in A
eeec : 6930                     adc #'0'    ;make printable 0-9
eeee : c93a                     cmp #'9'+1
eef0 : 9002                     bcc rchar
eef2 : 6906                     adc #6      ;make printable A-F
                        
                        ;send a character to standard output 
                        ;adjust according to the needs in your test environment
                        ;register X needs to be preserved!
eef4 :                  rchar               ;report character in A
                        ;        pha         ;wait TDRF
                        ;rchar1  lda $bff1
                        ;        and #$10
                        ;        beq rchar1
                        ;        pla
                        ;not a real ACIA - so TDRF is not checked
eef4 : 8d01f0                   sta $f001  ;write acia tx reg
                        ;the store can be replaced by a call to a kernal routine
                        ;        jsr $ffd2   ;example: CHROUT for a C64
eef7 : 60                       rts
                        
eef8 :                  rmsg_start
eef8 : 0a0d5374617274..         db  10,13,"Started testing",10,13,0
ef0c :                  rmsg_stack
ef0c : 0a0d7265677320..         db  10,13,"regs Y  X  A  PS PCLPCH",10,13,0
ef28 :                  rmsg_cont
ef28 : 0a0d7072657373..         db  10,13,"press C to continue",10,13,0
ef40 :                  rmsg_success
ef40 : 0a0d416c6c2074..         db  10,13,"All tests completed, press R to repeat",10,13,0
                            if rep_int = 1
                        rmsg_priority
                                db  10,13,"interrupt sequence (NMI IRQ BRK) ",0
                            endif
                           
                        
                            endif
                        
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif
                        data_init
                        ex_and_ and #0              ;execute immediate opcodes
                                rts
                        ex_eor_ eor #0              ;execute immediate opcodes
                                rts
                        ex_ora_ ora #0              ;execute immediate opcodes
                                rts
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
                        rASL_                       ;expected result ASL & ROL -carry
                        rROL_   db  $86,$04,$82,0   ; "
                        rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
                        rLSR_                       ;expected result LSR & ROR -carry
                        rROR_   db  $61,$41,$20,0   ; "
                        rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                       ;expected flags for shifts
                        fROL_   db  fnc,fc,fn,fz    ;no carry in
                        fROLc_  db  fnc,fc,fn,0     ;carry in
                        fLSR_
                        fROR_   db  fc,0,fc,fz      ;no carry in
                        fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80   ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0     ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                        
                            if (load_data_direct = 1) & (ROM_vectors = 1)
fffa =                          org $fffa       ;vectors
fffa : c1ed                     dw  nmi_trap
fffc : 00ae                     dw  code_segment
fffe : c9ed                     dw  irq_trap
                            endif
                        
fffa =                          end start
                        
No errors in pass 2.
Wrote binary from address $000a through $ffff.
Total size 65526 bytes.
Program start address is at $ae00 (44544).
